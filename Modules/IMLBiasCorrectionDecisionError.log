1                                         The SAS System           13:43 Wednesday, April 24, 2013

NOTE: Copyright (c) 2002-2010 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.3 (TS1M0) 
      Licensed to UNIVERSITY OF COLORADO - SFA T&R, Site 70082279.
NOTE: This session is executing on the X64_7PRO  platform.



NOTE: SAS initialization used:
      real time           0.34 seconds
      cpu time            0.17 seconds
      
1          /**************************************************************************************
1        ! ******
2          Created By:		Brandy Ringham
3          Creation Date:	12/12/11
4          
5          Description:
6          This macro bias corrects the AUC for randomly generated binormal data.  The motivating
7          example is a screening population where the sample consists of cases and non-cases.
7        ! There
8          are two screening test scores associated with each participant.  The means, variances,
8        ! and
9          correlations of the test scores are conditional on whether the participant is a case or
9        !  a
10         non-case.
11         
12         The user inputs required for the program are as follows:
13         seed        	seed for random number generation
14         errorCode		code for undefined entries - missing value not allowed,
15                         avoid values that could be misconstrued as a data point
16         nrep     		number of realizations of the study
17         sampsize 		sample size in each study
18         tolerance		tolerance of Nath algorithm
19         maxIteraions	maximum number of iterations allowed for Nath algorithm
20         tmuc1    		mean of test 1 scores for cases
21         tmuc2    		mean of test 2 scores for cases
22         tsigc1   		standard deviation of test 1 scores for cases
23         tsigc2   		standard deviation of test 2 scores for cases
24         trhoc    		correlation between test 1 and 2 scores for cases
25         tmun1    		mean of test 1 scores for non-cases
26         tmun2    		mean of test 2 scores for non-cases
27         tsign1   		standard deviation of test 1 scores for non-cases
28         tsign2   		standard deviation of test 2 scores for non-cases
29         trhon    		correlation between test 1 and 2 scores for non-cases
30         p      			disease prevalence
31         co1co2			cutoffs for tests 1 and 2
32         psi				rate of signs and symptoms
33         changer			variable that changes, choices are:  diseasePrevalence, rateSignsSymptoms,
34                         populationRhoCases, populationRhoNonCases, cutoffs
35         vector			vector or matrix of values for the changing variable
36         
37         ***************************************************************************************
37       ! *****/
2                                         The SAS System           13:43 Wednesday, April 24, 2013

38         
39         *assigns pathnames and storage library;
40         %include "CommonMacro.sas";
66         %include "../Macros/CommonMacro.sas";
WARNING: Physical file does not exist, C:\Users\munjala\Dropbox\Bias Correction R03 - 
         paired\BiasCorrectionSoftware\programs\Macros\CommonMacro.sas.
ERROR: Cannot open %INCLUDE file ../Macros/CommonMacro.sas.
67         
68         %CommonMacro;
Operating System: WIN
Macro Vault: C:\Users\munjala\Dropbox\Bias Correction R03 - 
paired\BiasCorrectionSoftware\programs\MacroVault
NOTE: Libref MLIB was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: C:\Users\munjala\Dropbox\Bias Correction R03 - 
      paired\BiasCorrectionSoftware\programs\MacroVault
98         
99         *simulate a whole bunch of bivariate normal stuff;
100        *subset it into quadrants;
101        *figure out which quadrants have < 2 observations;
102        *find summary statistics for quadrants with >= 2 observations;
103        %macro IMLBiasCorrectionDecisionError( seed, errorCode, nrep, sampsize, tolerance,
103      ! maxIterations, tmuc1, tmuc2, tsigc1, tsigc2, trhoc, tmun1,
104                                 tmun2, tsign1, tsign2, trhon, p, co1co2, psi, changer, vector
104      ! ) / store source;
105        
106        	*clear dataset;
107        	proc datasets lib = out01 nolist;
108        		delete results;
109        	run;
110        	quit;
111        
112        	*create empty file with preferred characteristics;
113        	data out01.results ( compress = no );
114        
115        		attrib
116        
117        		rep								length = 8 label = "Dataset ID"
118        		vectorRow						length = 8 label = "Experimental Variable Index"
119        		trueError						length = 8 label = "Less than 2 cases or non-cases"
120        		obsError						length = 8 label = "Less than 2 observed cases or non-cases"
121        		nathError						length = 8 label = "Nath algorithm did not converge in any quadrant"
122        		weighted						length = 8 label = "Source of corrected estimates (1 = weighted, 0 =
122      ! nath )"
123        		correctedNumberCasesError		length = 8 label = "Corrected Number of Cases Exceeded
123      ! Total Sample Size"
124        		hypErrorComplete				length = 8 label = "Population Delta AUC = 0 But Observed
124      ! Hypothesis Test Rejects"
125        		hypErrorObserved				length = 8 label = "Population Delta AUC = 0 But Observed
125      ! Hypothesis Test Rejects"
126        		hypErrorCorrected				length = 8 label = "Population Delta AUC = 0 But Corrected
126      ! Hypothesis Test Rejects"
127        		empty123						length = 8 label = "Less than 2 observed cases in quadrants 1, 2, and 3
3                                         The SAS System           13:43 Wednesday, April 24, 2013

127      !  together"
128        		empty1							length = 8 label = "Less than 2 observed cases in quadrant 1"
129        		empty2							length = 8 label = "Less than 2 observed cases in quadrant 2"
130        		empty3							length = 8 label = "Less than 2 observed cases in quadrant 3"
131        		empty4							length = 8 label = "Less than 2 observed cases in quadrant 4"
132        		diseasePrevalence				length = 8 label = "Disease Prevalence"
133        		rateSignsSymptoms				length = 8 label = "Rate of Signs and Symptoms"
134        		cutoffTest1						length = 8 label = "Cutoff for Test 1"
135        		cutoffTest2						length = 8 label = "Cutoff for Test 2"
136        		populationRhoCases				length = 8 label = "True Value of Rho for Cases"
137        		populationRhoNonCases			length = 8 label = "True Value of Rho for Non-Cases"
138        		nathMaxIterations				length = 8 label = "Maximum Number of Iterations for Nath
138      ! Algorithm"
139        		nathTolerance					length = 8 label = "Tolerance for Nath Algorithm"
140        		sampleSize						length = 8 label = "Sample Size"
141        		populationMu1Cases				length = 8 label = "True Value of Mu1 for Cases"
142        		populationMu2Cases				length = 8 label = "True Value of Mu2 for Cases"
143        		populationMu1NonCases			length = 8 label = "True Value of Mu1 for Non-Cases"
144        		populationMu2NonCases			length = 8 label = "True Value of Mu2 for Non-Cases"
145        		populationSig1Cases				length = 8 label = "True Value of Sigma1 for Cases"
146        		populationSig2Cases				length = 8 label = "True Value of Sigma2 for Cases"
147        		populationSig1NonCases			length = 8 label = "True Value of Sigma1 for Non-Cases"
148        		populationSig2NonCases			length = 8 label = "True Value of Sigma2 for Non-Cases"
149        		quadrantContainingMLECases		length = 8 label = "Quadrant Containing the MLE for
149      ! Cases"
150        	    quadrantContainingMLENonCases	length = 8 label = "Quadrant Containing the MLE for
150      ! Non-Cases"
151        		numberCases						length = 8 label = "Number of True Cases"
152        		meanT1Cases						length = 8 label = "Test 1 Mean for True Cases"
153        	    meanT2Cases         			length = 8 label = "Test 2 Mean for True Cases"
154        	    stdT1Cases          			length = 8 label = "Test 1 Standard Deviation for True
154      ! Cases"
155        	    stdT2Cases						length = 8 label = "Test 2 Standard Deviation for True Cases"
156        	    corrCases						length = 8 label = "Correlation Between True Cases"
157        		numberNonCases					length = 8 label = "Number of True Non-Cases"
158        		meanT1NonCases					length = 8 label = "Test 1 Mean for True Non-Cases"
159        	    meanT2NonCases         			length = 8 label = "Test 2 Mean for True Non-Cases"
160        	    stdT1NonCases          			length = 8 label = "Test 1 Standard Deviation for True
160      ! Non-Cases"
161        	    stdT2NonCases					length = 8 label = "Test 2 Standard Deviation for True
161      ! Non-Cases"
162        	    corrNonCases					length = 8 label = "Correlation Between True Non-Cases"
163        		numberObsCases					length = 8 label = "Number of Observed Cases"
164        		meanT1ObsCases					length = 8 label = "Test 1 Mean for Observed Cases"
165        	    meanT2ObsCases         			length = 8 label = "Test 2 Mean for Observed Cases"
166        	    stdT1ObsCases          			length = 8 label = "Test 1 Standard Deviation for
166      ! Observed Cases"
167        	    stdT2ObsCases					length = 8 label = "Test 2 Standard Deviation for Observed
167      ! Cases"
168        	    corrObsCases					length = 8 label = "Correlation Between Observed Cases"
169        		numberObsNonCases				length = 8 label = "Number of Observed Non-Cases"
170        		meanT1ObsNonCases				length = 8 label = "Test 1 Mean for Observed Non-Cases"
171        	    meanT2ObsNonCases         		length = 8 label = "Test 2 Mean for Observed
4                                         The SAS System           13:43 Wednesday, April 24, 2013

171      ! Non-Cases"
172        	    stdT1ObsNonCases          		length = 8 label = "Test 1 Standard Deviation for
172      ! Observed Non-Cases"
173        	    stdT2ObsNonCases				length = 8 label = "Test 2 Standard Deviation for Observed
173      ! Non-Cases"
174        	    corrObsNonCases					length = 8 label = "Correlation Between Observed Non-Cases"
175        		posT1SSGoldStd					length = 8 label = "Proportion of Cases That Screen Positive on
175      ! Test 1 or Screen Negative on Both Tests and Show Signs and Symptoms"
176        		posT2SSGoldStd					length = 8 label = "Proportion of Cases That Screen Positive on
176      ! Test 2 or Screen Negative on Both Tests and Show Signs and Symptoms"
177        		GoldStd							length = 8 label = "Proportion of Cases That Receive the Gold Standard
177      ! For Any Reason"
178        		numberObsCasesQuadrant1			length = 8 label = "Number of Observed Cases in Quadrant 1"
179        		meanT1ObsCasesQuadrant1			length = 8 label = "Test 1 Mean for Observed Cases in
179      ! Quadrant 1"
180        	    meanT2ObsCasesQuadrant1     	length = 8 label = "Test 2 Mean for Observed Cases in
180      !  Quadrant 1"
181        	    stdT1ObsCasesQuadrant1      	length = 8 label = "Test 1 Standard Deviation for
181      ! Observed Cases in Quadrant 1"
182        	    stdT2ObsCasesQuadrant1	    	length = 8 label = "Test 2 Standard Deviation for
182      ! Observed Cases in Quadrant 1"
183        	    corrObsCasesQuadrant1	    	length = 8 label = "Correlation Between Observed Cases
183      ! in Quadrant 1"
184        		numberObsCasesQuadrant2			length = 8 label = "Number of Observed Cases in Quadrant 2"
185        		meanT1ObsCasesQuadrant2			length = 8 label = "Test 1 Mean for Observed Cases in
185      ! Quadrant 2"
186        	    meanT2ObsCasesQuadrant2     	length = 8 label = "Test 2 Mean for Observed Cases in
186      !  Quadrant 2"
187        	    stdT1ObsCasesQuadrant2      	length = 8 label = "Test 1 Standard Deviation for
187      ! Observed Cases in Quadrant 2"
188        	    stdT2ObsCasesQuadrant2	    	length = 8 label = "Test 2 Standard Deviation for
188      ! Observed Cases in Quadrant 2"
189        	    corrObsCasesQuadrant2	    	length = 8 label = "Correlation Between Observed Cases
189      ! in Quadrant 2"
190        		numberObsCasesQuadrant3			length = 8 label = "Number of Observed Cases in Quadrant 3"
191        		meanT1ObsCasesQuadrant3			length = 8 label = "Test 1 Mean for Observed Cases in
191      ! Quadrant 3"
192        	    meanT2ObsCasesQuadrant3     	length = 8 label = "Test 2 Mean for Observed Cases in
192      !  Quadrant 3"
193        	    stdT1ObsCasesQuadrant3      	length = 8 label = "Test 1 Standard Deviation for
193      ! Observed Cases in Quadrant 3"
194        	    stdT2ObsCasesQuadrant3	    	length = 8 label = "Test 2 Standard Deviation for
194      ! Observed Cases in Quadrant 3"
195        	    corrObsCasesQuadrant3	    	length = 8 label = "Correlation Between Observed Cases
195      ! in Quadrant 3"
196        		numberObsCasesQuadrant4			length = 8 label = "Number of Observed Cases in Quadrant 4"
197        		meanT1ObsCasesQuadrant4			length = 8	label = "Test 1 Mean for Observed Cases in
197      ! Quadrant 4"
198        	    meanT2ObsCasesQuadrant4     	length = 8 label = "Test 2 Mean for Observed Cases in
198      !  Quadrant 4"
199        	    stdT1ObsCasesQuadrant4      	length = 8 label = "Test 1 Standard Deviation for
199      ! Observed Cases in Quadrant 4"
200        	    stdT2ObsCasesQuadrant4	    	length = 8 label = "Test 2 Standard Deviation for
5                                         The SAS System           13:43 Wednesday, April 24, 2013

200      ! Observed Cases in Quadrant 4"
201        	    corrObsCasesQuadrant4	    	length = 8 label = "Correlation Between Observed Cases
201      ! in Quadrant 4"
202        		numberObsCasesQ123				length = 8 label = "Number of Observed Cases in Quadrants 1, 2,
202      !  and 3 Together"
203        		meanT1ObsCasesQ123				length = 8 label = "Test 1 Mean for Observed Cases in Quadrants
203      !  1, 2, and 3 Together"
204        	    meanT2ObsCasesQ123     			length = 8 label = "Test 2 Mean for Observed Cases in
204      ! Quadrants 1, 2, and 3 Together"
205        	    stdT1ObsCasesQ123      			length = 8 label = "Test 1 Standard Deviation for
205      ! Observed Cases in Quadrants 1, 2, and 3 Together"
206        	    stdT2ObsCasesQ123	    		length = 8 label = "Test 2 Standard Deviation for Observed
206      !  Cases in Quadrants 1, 2, and 3 Together"
207        	    corrObsCasesQ123	    		length = 8 label = "Correlation Between Observed Cases in
207      ! Quadrants 1, 2, and 3 Together"
208        		outcome1						length = 8 label = "Outcome of Nath Algorithm in Quadrant 1"
209        		outcome2						length = 8 label = "Outcome of Nath Algorithm in Quadrant 2"
210        		outcome3						length = 8 label = "Outcome of Nath Algorithm in Quadrant 3"
211        		outcome4						length = 8 label = "Outcome of Nath Algorithm in Quadrant 4"
212        		choice							length = 8 label = "Nath Estimates Chosen From This Quadrant"
213        		logL							length = 8 label = "Log Likelihood for Nath Estimates from Chosen
213      ! Quadrant"
214        	  	nathIterations					length = 8 label = "Number of Iterations of Nath Algorithm for
214      ! Chosen Quadrant"
215        		nathOutcome  					length = 8 label = "Nath Error Code for Chosen Quadrant"
216        		nathMu1							length = 8 label = "Nath Estimate for Mu1"
217        		nathMu2							length = 8 label = "Nath Estimate for Mu2"
218        		nathSig1						length = 8 label = "Nath Estimate for Sig1"
219        		nathSig2						length = 8 label = "Nath Estimate for Sig2"
220        		nathRho							length = 8 label = "Nath Estimate for Rho"
221        		probQ123Nath					length = 8 label = "Estimated Probability of Quadrants 1, 2, and 3
221      ! Based On Nath"
222        		probQuadrant4Nath				length = 8 label = "Estimated Probability of Quadrant 4 Based On
222      !  Nath"
223        		probQ123Weighted				length = 8 label = "Estimated Probability of Quadrants 1, 2, and
223      ! 3 Based On Weighted Estimates"
224        		probQuadrant4Weighted			length = 8 label = "Estimated Probability of Quadrant 4 Based
224      !  On Weighted Estimates"
225        		correctedNumberCases			length = 8 label = "Corrected Number of Cases Based On Nath"
226        		correctedNumberNonCases  		length = 8 label = "Corrected Number of Non-Cases Based On
226      !  Nath"
227        		weightedMu1						length = 8 label = "Weighted Estimate for Mu1"
228        		weightedMu2						length = 8 label = "Weighted Estimate for Mu2"
229        		weightedSig1					length = 8 label = "Weighted Estimate for Sig1"
230        		weightedSig2					length = 8 label = "Weighted Estimate for Sig2"
231        		weightedRho						length = 8 label = "Weighted Estimate for Rho"
232        		correctedMu1					length = 8 label = "Corrected Estimate for Mu1"
233        		correctedMu2					length = 8 label = "Corrected Estimate for Mu2"
234        		correctedSig1					length = 8 label = "Corrected Estimate for Sig1"
235        		correctedSig2					length = 8 label = "Corrected Estimate for Sig2"
236        		correctedRho					length = 8 label = "Corrected Estimate for Rho"
237        		populationAUCT1ParmA			length = 8 label = "Parameter A for Test 1 Binormal AUC
237      ! Calculated From Population (True) Values"
6                                         The SAS System           13:43 Wednesday, April 24, 2013

238        		populationAUCT1ParmB			length = 8 label = "Parameter B for Test 1 Binormal AUC
238      ! Calculated From Population (True) Values"
239        		populationAUCT1					length = 8 label = "Test 1 AUC Calculated From Population (True)
239      ! Values"
240        		populationAUCT2ParmA			length = 8 label = "Parameter A for Test 2 Binormal AUC
240      ! Calculated From Population (True) Values"
241        		populationAUCT2ParmB			length = 8 label = "Parameter B for Test 2 Binormal AUC
241      ! Calculated From Population (True) Values"
242        		populationAUCT2					length = 8 label = "Test 2 AUC Calculated From Population (True)
242      ! Values"
243        		populationDeltaAUC				length = 8 label = "Difference in AUC (Test 1 - Test 2)
243      ! Calculated From Population (True) Values"
244        		completeAUCT1ParmA				length = 8 label = "Parameter A for Test 1 Binormal AUC
244      ! Calculated Assuming Complete Disease Status Ascertainment"
245        		completeAUCT1ParmB				length = 8 label = "Parameter B for Test 1 Binormal AUC
245      ! Calculated Assuming Complete Disease Status Ascertainment"
246        		completeAUCT1					length = 8 label = "Test 1 AUC Calculated Assuming Complete Disease
246      !  Status Ascertainment"
247        		completeAUCT2ParmA				length = 8 label = "Parameter A for Test 2 Binormal AUC
247      ! Calculated Assuming Complete Disease Status Ascertainment"
248        		completeAUCT2ParmB				length = 8 label = "Parameter B for Test 2 Binormal AUC
248      ! Calculated Assuming Complete Disease Status Ascertainment"
249        		completeAUCT2					length = 8 label = "Test 2 AUC Calculated Assuming Complete Disease
249      !  Status Ascertainment"
250        		completeDeltaAUC				length = 8 label = "Difference in AUC (Test 1 - Test 2)
250      ! Calculated Assuming Complete Disease Status Ascertainment"
251        		completeSEDeltaAUC				length = 8 label = "Standard Error of the Difference in AUC
251      ! Assuming Complete Disease Status Ascertainment"
252        		completeZDeltaAUC				length = 8 label = "Z Value for Delta AUC Hypothesis Test
252      ! Assuming Complete Disease Status Ascertainment"
253        		completePDeltaAUC				length = 8 label = "P Value for Delta AUC Hypothesis Test
253      ! Assuming Complete Disease Status Ascertainment"
254        		completeReject					length = 8 label = "Indicator that Delta AUC Hypothesis Test
254      ! Assuming Complete Disease Status Ascertainment Rejected (1 = reject, 0 = fail to
254      ! reject)"
255        		directionCompleteHypTest		length = 8 label = "Indicator for Direction of Rejection of
255      !  Complete Hypothesis Test (0 = fail, 1 = correct, -1 = reverse)"
256        		observedAUCT1ParmA				length = 8 label = "Parameter A for Test 1 Binormal AUC
256      ! Calculated Using Observed Summary Stats"
257        		observedAUCT1ParmB				length = 8 label = "Parameter B for Test 1 Binormal AUC
257      ! Calculated Using Observed Summary Stats"
258        		observedAUCT1					length = 8 label = "Test 1 AUC Calculated From Observed Summary
258      ! Stats"
259        		observedAUCT2ParmA				length = 8 label = "Parameter A for Test 2 Binormal AUC
259      ! Calculated Using Observed Summary Stats"
260        		observedAUCT2ParmB				length = 8 label = "Parameter B for Test 2 Binormal AUC
260      ! Calculated Using Observed Summary Stats"
261        		observedAUCT2					length = 8 label = "Test 2 AUC Calculated From Observed Summary
261      ! Stats"
262        		observedDeltaAUC				length = 8 label = "Difference in AUC (Test 1 - Test 2)
262      ! Calculated From Observed Summary Stats"
263        		observedSEDeltaAUC				length = 8 label = "Standard Error of the Difference in AUC
263      ! Calculated From Observed Summary Stats"
7                                         The SAS System           13:43 Wednesday, April 24, 2013

264        		observedZDeltaAUC				length = 8 label = "Z Value for Delta AUC Hypothesis Test
264      ! Calculated From Observed Summary Stats"
265        		observedPDeltaAUC				length = 8 label = "P Value for Delta AUC Hypothesis Test
265      ! Calculated From Observed Summary Stats"
266        		observedReject					length = 8 label = "Indicator that Delta AUC Hypothesis Test
266      ! Calculated From Observed Summary Stats Rejected (1 = reject, 0 = fail to reject)"
267        		bias							length = 8 label = "Bias"
268        		directionObservedHypTest		length = 8 label = "Indicator for Direction of Rejection of
268      !  Observed Hypothesis Test (0 = fail, 1 = correct, -1 = reverse)"
269        		correctedAUCT1ParmA				length = 8 label = "Parameter A for Test 1 Binormal AUC
269      ! Calculated Using Corrected Summary Stats for Cases / Observed for Non-Cases"
270        		correctedAUCT1ParmB				length = 8 label = "Parameter B for Test 1 Binormal AUC
270      ! Calculated Using Corrected Summary Stats for Cases / Observed for Non-Cases"
271        		correctedAUCT1					length = 8 label = "Test 1 AUC Calculated From Corrected Summary
271      ! Stats for Cases / Observed for Non-Cases"
272        		correctedAUCT2ParmA				length = 8 label = "Parameter A for Test 2 Binormal AUC
272      ! Calculated Using Corrected Summary Stats for Cases / Observed for Non-Cases"
273        		correctedAUCT2ParmB				length = 8 label = "Parameter B for Test 2 Binormal AUC
273      ! Calculated Using Corrected Summary Stats for Cases / Observed for Non-Cases"
274        		correctedAUCT2					length = 8 label = "Test 2 AUC Calculated From Corrected Summary
274      ! Stats for Cases / Observed for Non-Cases"
275        		correctedDeltaAUC				length = 8 label = "Difference in AUC (Test 1 - Test 2)
275      ! Calculated From Corrected Summary Stats for Cases / Observed for Non-Cases"
276        		correctedSEDeltaAUC				length = 8 label = "Standard Error of the Difference in AUC
276      ! Calculated From Corrected Summary Stats for Cases / Observed for Non-Cases"
277        		correctedZDeltaAUC				length = 8 label = "Z Value for Delta AUC Hypothesis Test
277      ! Calculated From Corrected Summary Stats for Cases / Observed for Non-Cases"
278        		correctedPDeltaAUC				length = 8 label = "P Value for Delta AUC Hypothesis Test
278      ! Calculated From Corrected Summary Stats for Cases / Observed for Non-Cases"
279        		correctedReject					length = 8 label = "Indicator that Delta AUC Hypothesis Test
279      ! Calculated From Corrected Summary Stats for Cases / Observed for Non-Cases Rejected (1
279      ! = reject, 0 = fail to reject)"
280        		uncorrectedBias					length = 8 label = "Uncorrected bias"
281        		directionCorrectedHypTest		length = 8 label = "Indicator for Direction of Rejection
281      ! of Corrected Hypothesis Test (0 = fail, 1 = correct, -1 = reverse)"
282        		additionalColumnsNeeded			length = 8 label = "Number of empty columns added to the
282      ! row to make the matrix conform - if this number is anything but 0 DO NOT USE ROW"
283        		columnError						length = 8 label = "1 = program errored out and dummy columns were
283      ! created, 0 = no errors that required dummy columns"
284        		resumeError						length = 8 label = "1 = program errored out and resumed without
284      ! resolving error, 0 = no resume error"
285        		errorsThisRep					length = 8 label = "Number of errors ignored for the current
285      ! iteration"
286        		cumErrors						length = 8 label = "Cumulative number of errors ignored during
286      ! program";
287        
288        		rename  empty1 = emptyQuad1
289        			    empty2 = emptyQuad2
290        			    empty3 = emptyQuad3
291        			    empty4 = emptyQuad4
292        			    tmuc1 = meanOfTest1ScoresCases
293        			    tmuc2 = meanOfTest2ScoresCases
294        			    tmun1 = meanOfTest1ScoresNonCases
8                                         The SAS System           13:43 Wednesday, April 24, 2013

295        				tmun2 = meanOfTest2ScoresNonCases
296        				tsigc1 = stdOfTest1ScoresCases
297        				tsigc2 = stdOfTest2ScoresCases
298        				tsign1 = stdOfTest1ScoresNonCases
299        				tsign2 = stdOfTest2ScoresNonCases
300        				quadrantContainingMLECases = quadrantMLECases
301        				quadrantContainingMLENonCases = quadrantMLENonCases
302        				outcome1 = outcomeNathQuad1
303        				outcome2 = outcomeNathQuad2
304        				outcome3 = outcomeNathQuad3
305        				outcome4 = outcomeNathQuad4 ;
306        
307        				set out01.results;
308        
309        			run;
310        
311        		if _n_= 1 then delete;
312        
313        	run;
314        
315        	proc iml worksize = 3000 symsize = 6000;	
316        
317        		/*define storage location for modules and load all modules*/
318        		reset storage = mlib.IMLModules;
319        		load _all_;
320        
321        		/*open dataset to edit*/
322        		edit out01.results;
323        
324        		/*free variables that do not change within the do loop*/
325        		/*note:  in order to make the program more flexible, we also free the experimental
325      ! variable but then reassign it later*/
326        		free errCode cumErrors pastErrors
327        			 maxIterations tolerance sampSize
328        			 tmuc1 tmuc2 tmun1 tmun2 tsigc1 tsigc2 tsign1 tsign2
329                     rateSignsSymptoms diseasePrevalence cutoffs populationRhoCases
329      ! populationRhoNonCases
330        			 populationAUCT1 populationAUCT2 populationDeltaAUC
331        			 quadrantContainingMLECases quadrantContainingMLENonCases
332        	         ncat vectorRow;
333        
334        		start main;
335        
336        			errCode = { "if cumErrors >= 0 then do;",
337        							"cumErrors = cumErrors + 1;",
338        							"call push( errCode ); resume;",
339        						"end;" };
340        
341        			cumErrors = 0;
342        			pastErrors = 0;
343        
344        			call push( errCode );
345        
9                                         The SAS System           13:43 Wednesday, April 24, 2013

346        			start biasCorrection;
347        				
348        				/*give values to constants*/
349        				/*we have to assign the macro variables as local variables because the IML
349      ! modules*/
350        				/*do not like to use macro variables as operands*/
351        				maxIterations = &maxIterations;
352        				tolerance = &tolerance;
353        				sampSize = &sampSize;
354        				tmuc1 = &tmuc1;
355        				tmuc2 = &tmuc2;
356        				tmun1 = &tmun1;
357        				tmun2 = &tmun2;
358        				tsigc1 = &tsigc1;
359        				tsigc2 = &tsigc2;
360        				tsign1 = &tsign1;
361        				tsign2 = &tsign2;
362        
363        				/*give values to experimental variables*/
364        				/*note: we will overwrite the experimental variable(s) with new values*/
365        				rateSignsSymptoms = &psi;
366        				diseasePrevalence = &p;
367        				cutoffs = &co1co2;
368        				populationRhoCases = &trhoc;
369        				populationRhoNonCases = &trhon;
370        
371        				/*calculate true AUCs and difference in AUCs*/
372        				populationAUCT1 = calculateAUC( errCode, cumErrors, tmuc1, tmun1, tsigc1, tsign1 );
373        				populationAUCT2 = calculateAUC( errcode, cumErrors, tmuc2, tmun2, tsigc2, tsign2 );
374        				populationDeltaAUC = populationAUCT1[ , 3 ] - populationAUCT2[ , 3 ];
375        
376        				/*find the quadrant containing the MLE for cases and non-cases*/
377        				if &tmuc1 >= cutoffs[ , 1 ] & &tmuc2 >= cutoffs[ , 2 ] then
377      ! quadrantContainingMLECases = 1;
378        					else if &tmuc1 >= cutoffs[ , 1 ] & &tmuc2 < cutoffs[ , 2 ] then
378      ! quadrantContainingMLECases = 2;
379        						else if &tmuc1 < cutoffs[ , 1 ] & &tmuc2 >= cutoffs[ , 2 ] then
379      ! quadrantContainingMLECases = 3;
380        							else quadrantContainingMLECases = 4;
381        
382        				if &tmun1 >= cutoffs[ , 1 ] & &tmun2 >= cutoffs[ , 2 ] then
382      ! quadrantContainingMLENonCases = 1;
383        					else if &tmun1 >= cutoffs[ , 1 ] & &tmun2 < cutoffs[ , 2 ] then
383      ! quadrantContainingMLENonCases = 2;
384        						else if &tmun1 < cutoffs[ , 1 ] & &tmun2 >= cutoffs[ , 2 ] then
384      ! quadrantContainingMLENonCases = 3;
385        							else quadrantContainingMLENonCases = 4;
386        
387        				/*create a vector of parameter values to loop through*/
388        				ncat = nrow( &vector );
389        
390        				/*loop through parameter values for the experimental variable*/
391        				do vectorRow = 1 to ncat by 1;
10                                        The SAS System           13:43 Wednesday, April 24, 2013

392        
393        					/*free rep of value used in last iteration of vectorRow do loop*/	
394        					/*free experimental variable of value assigned above*/	
395        					free rep &changer;
396        
397        					/*set current value for variable that changes*/
398        					&changer = &vector[ vectorRow, ];
399        
400        					/*set values for rep*/
401        					do rep = 1 to &nrep;
402        
403        						/*free variable names used in last iteration of rep do loop*/
404        						/*do not free variables assigned outside this do loop*/
405        						free / errCode cumErrors pastErrors
406        							   maxIterations tolerance sampSize
407        			                   tmuc1 tmuc2 tmun1 tmun2 tsigc1 tsigc2 tsign1 tsign2
408        							   rateSignsSymptoms diseasePrevalence cutoffs populationRhoCases
408      ! populationRhoNonCases
409        							   populationAUCT1 populationAUCT2 populationDeltaAUC quadrantContainingMLECases
409      !  quadrantContainingMLENonCases
410        							   ncat vectorRow rep &changer;
411        
412        						/*generate binormal data*/
413        						/*make a matrix with id disease t1score t2score and signs and symptoms in it*/
414        						/*set a seed for random number generator calls*/
415        						call randseed( &seed, 0 );
416        
417        						/*generates a random number of cases from a binomial distribution with n = sample
417      !  size and p = prevalence*/
418        						call randgen( numberCases, 'BINOM', diseasePrevalence, &sampSize );
419        
420        						numberNonCases = &sampSize - numberCases;
421        
422        						if numberCases < 2 | numberNonCases < 2 then do;
423        							
424        							trueError = 1;
425        							obsError = &errorCode;
426        							correctedNumberCasesError = &errorCode;
427        							empty123 = &errorCode;
428        							empty1 = &errorCode;
429        							empty2 = &errorCode;
430        							empty3 = &errorCode;
431        							empty4 = &errorCode;
432        							meanT1Cases = &errorCode;
433        							meanT2Cases = &errorCode;
434        							stdT1Cases = &errorCode;
435        							stdT2Cases = &errorCode;
436        							corrCases = &errorCode;
437        							meanT1NonCases = &errorCode;
438        							meanT2NonCases = &errorCode;
439        							stdT1NonCases = &errorCode;
440        							stdT2NonCases = &errorCode;
441        							corrNonCases = &errorCode;
11                                        The SAS System           13:43 Wednesday, April 24, 2013

442        							numberObsCases = &errorCode;
443        							meanT1ObsCases = &errorCode;
444        							meanT2ObsCases = &errorCode;
445        							stdT1ObsCases = &errorCode;
446        							stdT2ObsCases = &errorCode;
447        							corrObsCases = &errorCode;
448        							numberObsNonCases = &errorCode;
449        							meanT1ObsNonCases = &errorCode;
450        							meanT2ObsNonCases = &errorCode;
451        							stdT1ObsNonCases = &errorCode;
452        							stdT2ObsNonCases = &errorCode;
453        							corrObsNonCases = &errorCode;
454        							posT1SSGoldStd = &errorCode;	
455        							posT2SSGoldStd = &errorCode;	
456        							GoldStd = &errorCode;
457        							numberObsCasesQuadrant1 = &errorCode;
458        							meanT1ObsCasesQuadrant1 = &errorCode;
459        							meanT2ObsCasesQuadrant1 = &errorCode;
460        							stdT1ObsCasesQuadrant1 = &errorCode;
461        							stdT2ObsCasesQuadrant1 = &errorCode;
462        							corrObsCasesQuadrant1 = &errorCode;
463        							numberObsCasesQuadrant2 = &errorCode;
464        							meanT1ObsCasesQuadrant2 = &errorCode;
465        							meanT2ObsCasesQuadrant2 = &errorCode;
466        							stdT1ObsCasesQuadrant2 = &errorCode;
467        							stdT2ObsCasesQuadrant2 = &errorCode;
468        							corrObsCasesQuadrant2 = &errorCode;
469        							numberObsCasesQuadrant3 = &errorCode;
470        							meanT1ObsCasesQuadrant3 = &errorCode;
471        							meanT2ObsCasesQuadrant3 = &errorCode;
472        							stdT1ObsCasesQuadrant3 = &errorCode;
473        							stdT2ObsCasesQuadrant3 = &errorCode;
474        							corrObsCasesQuadrant3 = &errorCode;
475        							numberObsCasesQuadrant4 = &errorCode;
476        							meanT1ObsCasesQuadrant4 = &errorCode;
477        							meanT2ObsCasesQuadrant4 = &errorCode;
478        							stdT1ObsCasesQuadrant4 = &errorCode;
479        							stdT2ObsCasesQuadrant4 = &errorCode;
480        							corrObsCasesQuadrant4 = &errorCode;
481        							numberObsCasesQ123 = &errorCode;
482        							meanT1ObsCasesQ123 = &errorCode;
483        							meanT2ObsCasesQ123 = &errorCode;
484        							stdT1ObsCasesQ123 = &errorCode;
485        							stdT2ObsCasesQ123 = &errorCode;
486        							corrObsCasesQ123 = &errorCode;
487        							outcome1 = &errorCode;
488        							outcome2 = &errorCode;
489        							outcome3 = &errorCode;
490        							outcome4 = &errorCode;
491        							nathError = &errorCode;
492        							nathEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode ||
492      ! &errorCode || &errorCode || &errorCode || &errorCode || &errorCode ;
493        							bivariateNormalProbabilitiesNath = &errorCode || &errorCode ;
12                                        The SAS System           13:43 Wednesday, April 24, 2013

494        							bivNormProbsWeighted = &errorCode || &errorCode ;
495        							correctedNumberCasesNonCases = &errorCode || &errorCode ;
496        						    weightedEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode
496      ! || &errorCode ;
497        						    weighted = &errorCode;
498        				            correctedEstimatesRow = &errorCode || &errorCode || &errorCode ||
498      ! &errorCode || &errorCode ;	
499        							completeAUCT1 = &errorCode || &errorCode || &errorCode ;
500        							completeAUCT2 = &errorCode || &errorCode || &errorCode ;
501        							completeHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
501      ! &errorCode ;
502        							hypErrorComplete = &errorCode ;
503        							directionCompleteHypTest = &errorCode ;
504        							observedAUCT1 = &errorCode || &errorCode || &errorCode ;
505        							observedAUCT2 = &errorCode || &errorCode || &errorCode ;
506        							observedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
506      ! &errorCode ;
507        							bias = &errorCode;
508        							hypErrorObserved = &errorCode ;
509        							directionObservedHypTest = &errorCode ;
510        							correctedAUCT1 = &errorCode || &errorCode || &errorCode ;
511        							correctedAUCT2 = &errorCode || &errorCode || &errorCode ;
512        							correctedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
512      ! &errorCode ;
513        							uncorrectedBias = &errorCode;
514        							hypErrorCorrected = &errorCode ;
515        							directionCorrectedHypTest = &errorCode ;
516        						end; /*end not enough true cases*/
517        
518        						else do;
519        							trueError = 0;
520        
521        							/*matrix of participant ids*/
522        							id = ( 1:&sampSize )`;
523        
524        							/*create matrices of indicators for case or non-case*/
525        							/*create a matrix of 1 with length equal to the number of cases*/
526        							casesDisease = j( numberCases, 1, 1 );
527        
528        							/*create a matrix of 0's of length equal to the sample size - number of cases*/
529        							nonCasesDisease = j( numberNonCases, 1, 0 );
530        
531        							/*create disease index matrix*/
532        							disease = casesDisease // nonCasesDisease;
533        
534        							/*generate binormal test scores for cases and non-cases*/
535        							/*cases*/
536        							meanCases = { &tmuc1 &tmuc2 };
537        							rhoMatrixCases = { 1 &trhoc, &trhoc 1 };
538        							sigmaMatrixCases = { &tsigc1 &tsigc2 };
539        							covMatrixCases = rhoMatrixCases # ( sigmaMatrixCases` * sigmaMatrixCases );
540        							scoreMatrixCases = randnormal( numberCases, meanCases, covMatrixCases );
541        							t1scoreCases = scoreMatrixCases[ , 1 ];
13                                        The SAS System           13:43 Wednesday, April 24, 2013

542        							t2scoreCases = scoreMatrixCases[ , 2 ];
543        						
544        							/*non-cases*/
545        							meanNonCases = { &tmun1 &tmun2 };
546        							rhoMatrixNonCases = { 1 &trhon, &trhon 1 };
547        							sigmaMatrixNonCases = { &tsign1 &tsign2 };
548        							covMatrixNonCases = rhoMatrixNonCases # ( sigmaMatrixNonCases` *
548      ! sigmaMatrixNonCases );
549        							scoreMatrixNonCases = randnormal( numberNonCases, meanNonCases,
549      ! covMatrixNonCases );
550        							t1scoreNonCases = scoreMatrixNonCases[ , 1 ];
551        							t2scoreNonCases = scoreMatrixNonCases[ , 2 ];
552        
553        							/*combine score matrices*/	
554        							t1score = t1scoreCases // t1scoreNonCases;
555        							t2score = t2scoreCases // t2scoreNonCases;
556        
557        							/*assign signs and symptoms*/
558        							/*cases*/
559        							ssCases = j( numberCases, 1, &errorCode );
560        							call randgen( ssCases, 'BERN', rateSignsSymptoms );
561        
562        							/*non-cases*/
563        							ssNonCases = j( numberNonCases, 1, 0 );
564        
565        							/*combine signs and symptoms matrices*/
566        							ss = ssCases // ssNonCases;
567        
568        							/*make data matrix*/
569        							matrix = id || disease || ss || t1score || t2score;	
570        
571        							/*subset matrix into the groups*/
572        							/*we will then get summary statistics of the test scores in each of the groups*/
573        
574        							/*first, we must make sure there is more than 1 observed case and non-case*/
575        							/*if not, we will not calculate any summary statistics and we will return an
575      ! error*/
576        
577        							/*find the locations of each observation in each of the groups*/
578        							/*if any of the locations are empty, write an error*/
579        							/*Observed cases: disease = 1 and at least one test score is above the threshold
579      !  or ss = 1*/
580        							indicateObsCases = ( matrix[ , 2 ] = 1 &
581        				                               ( matrix[ , 3 ] = 1 |
582        				                                 matrix[ , 4 ] >= cutoffs[ , 1 ] |
583        				                                 matrix[ , 5 ] >= cutoffs[ , 2 ] ) );
584        
585        							/*Observed non-cases: disease = 0 or disease = 1 and ss = 0 and both test scores
585      !  are below their thresholds*/
586        							indicateObsNonCases = ( matrix[ , 2 ] = 0 |
587        					                              ( matrix[ , 2 ] = 1 &
588        					                                matrix[ , 3 ] = 0 &
589        					                                matrix[ , 4 ] < cutoffs[ , 1 ] &
14                                        The SAS System           13:43 Wednesday, April 24, 2013

590        					                                matrix[ , 5 ] < cutoffs[ , 2 ] ) );
591        
592        							/*calculate the number of observed cases*/
593        							numberObsCases = sum( indicateObsCases );
594        							numberObsNonCases = sum( indicateObsNonCases );
595        
596        							/*if there are less than 2 observed cases or non-cases, do not calculate any
596      ! summary statistics and return an error*/
597        							if ( numberObsCases < 2 | numberObsNonCases < 2 ) then do;
598        								
599        								obsError = 1;
600        								correctedNumberCasesError = &errorCode;
601        								empty123 = &errorCode;
602        								empty1 = &errorCode;
603        								empty2 = &errorCode;
604        								empty3 = &errorCode;
605        								empty4 = &errorCode;
606        								meanT1Cases = &errorCode;
607        								meanT2Cases = &errorCode;
608        								stdT1Cases = &errorCode;
609        								stdT2Cases = &errorCode;
610        								corrCases = &errorCode;
611        								meanT1NonCases = &errorCode;
612        								meanT2NonCases = &errorCode;
613        								stdT1NonCases = &errorCode;
614        								stdT2NonCases = &errorCode;
615        								corrNonCases = &errorCode;
616        								meanT1ObsCases = &errorCode;
617        								meanT2ObsCases = &errorCode;
618        								stdT1ObsCases = &errorCode;
619        								stdT2ObsCases = &errorCode;
620        								corrObsCases = &errorCode;
621        								meanT1ObsNonCases = &errorCode;
622        								meanT2ObsNonCases = &errorCode;
623        								stdT1ObsNonCases = &errorCode;
624        								stdT2ObsNonCases = &errorCode;
625        								corrObsNonCases = &errorCode;
626        								posT1SSGoldStd = &errorCode;	
627        								posT2SSGoldStd = &errorCode;	
628        								GoldStd = &errorCode;
629        								numberObsCasesQuadrant1 = &errorCode;
630        								meanT1ObsCasesQuadrant1 = &errorCode;
631        								meanT2ObsCasesQuadrant1 = &errorCode;
632        								stdT1ObsCasesQuadrant1 = &errorCode;
633        								stdT2ObsCasesQuadrant1 = &errorCode;
634        								corrObsCasesQuadrant1 = &errorCode;
635        								numberObsCasesQuadrant2 = &errorCode;
636        								meanT1ObsCasesQuadrant2 = &errorCode;
637        								meanT2ObsCasesQuadrant2 = &errorCode;
638        								stdT1ObsCasesQuadrant2 = &errorCode;
639        								stdT2ObsCasesQuadrant2 = &errorCode;
640        								corrObsCasesQuadrant2 = &errorCode;
641        								numberObsCasesQuadrant3 = &errorCode;
15                                        The SAS System           13:43 Wednesday, April 24, 2013

642        								meanT1ObsCasesQuadrant3 = &errorCode;
643        								meanT2ObsCasesQuadrant3 = &errorCode;
644        								stdT1ObsCasesQuadrant3 = &errorCode;
645        								stdT2ObsCasesQuadrant3 = &errorCode;
646        								corrObsCasesQuadrant3 = &errorCode;
647        								numberObsCasesQuadrant4 = &errorCode;
648        								meanT1ObsCasesQuadrant4 = &errorCode;
649        								meanT2ObsCasesQuadrant4 = &errorCode;
650        								stdT1ObsCasesQuadrant4 = &errorCode;
651        								stdT2ObsCasesQuadrant4 = &errorCode;
652        								corrObsCasesQuadrant4 = &errorCode;
653        								numberObsCasesQ123 = &errorCode;
654        								meanT1ObsCasesQ123 = &errorCode;
655        								meanT2ObsCasesQ123 = &errorCode;
656        								stdT1ObsCasesQ123 = &errorCode;
657        								stdT2ObsCasesQ123 = &errorCode;
658        								corrObsCasesQ123 = &errorCode;
659        								outcome1 = &errorCode;
660        								outcome2 = &errorCode;
661        								outcome3 = &errorCode;
662        								outcome4 = &errorCode;
663        								nathError = &errorCode;
664        								nathEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode ||
664      ! &errorCode || &errorCode || &errorCode || &errorCode|| &errorCode ;
665        								bivariateNormalProbabilitiesNath = &errorCode || &errorCode ;
666        								bivNormProbsWeighted = &errorCode || &errorCode ;
667        								correctedNumberCasesNonCases = &errorCode || &errorCode ;
668        							    weightedEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode
668      ! || &errorCode ;
669        							    weighted = &errorCode;
670        					            correctedEstimatesRow = &errorCode || &errorCode || &errorCode ||
670      ! &errorCode || &errorCode ;	
671        								completeAUCT1 = &errorCode || &errorCode || &errorCode ;
672        								completeAUCT2 = &errorCode || &errorCode || &errorCode ;
673        								completeHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
673      ! &errorCode ;
674        								hypErrorComplete = &errorCode ;
675        								directionCompleteHypTest = &errorCode ;
676        								observedAUCT1 = &errorCode || &errorCode || &errorCode ;
677        								observedAUCT2 = &errorCode || &errorCode || &errorCode ;
678        								observedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
678      ! &errorCode ;
679        								bias = &errorcode;
680        								hypErrorObserved = &errorCode ;
681        								directionObservedHypTest = &errorCode ;
682        								correctedAUCT1 = &errorCode || &errorCode || &errorCode ;
683        								correctedAUCT2 = &errorCode || &errorCode || &errorCode ;
684        								correctedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
684      ! &errorCode ;
685        								uncorrectedBias = &errorCode;
686        								hypErrorCorrected = &errorCode ;
687        								directionCorrectedHypTest = &errorCode ;
688        							end; /*end not enough observed cases*/
16                                        The SAS System           13:43 Wednesday, April 24, 2013

689        
690        							else do;
691        
692        								obsError = 0;
693        
694        								/*subset the true cases and non-cases*/
695        								cases = matrix[ ( loc( matrix[ , 2 ] = 1 ) )`, ];
696        								nonCases = matrix[ ( loc( matrix[ , 2 ] = 0 ) )`, ];
697        
698        								/*find mean, std, corr of true cases*/
699        								meanT1Cases = mean( cases[ , 4 ] );
700        
701        								meanT2Cases = mean( cases[ , 5 ] );
702        								sampleCovMatrixCases = cov( cases[ , 4 ] || cases[ , 5 ] );
703        
704        								stdT1Cases = sqrt( sampleCovMatrixCases[ 1, 1 ] );
705        								stdT2Cases = sqrt( sampleCovMatrixCases[ 2, 2 ] );
706        
707        								/*use only element 12 of the 2 x 2 covariance matrix*/
708        								corrCases = sampleCovMatrixCases[ 1, 2 ] / stdT1Cases / stdT2Cases;
709        								
710        
711        								/*find mean, std, corr of true non-cases*/
712        								meanT1NonCases = mean( nonCases[ , 4 ] );
713        								meanT2NonCases = mean( nonCases[ , 5 ] );
714        								sampleCovMatrixNonCases = cov( nonCases[ , 4 ] || nonCases[ , 5 ] );
715        
716        								stdT1NonCases = sqrt( sampleCovMatrixNonCases[ 1, 1 ] );
717        								stdT2NonCases = sqrt( sampleCovMatrixNonCases[ 2, 2 ] );
718        
719        								/*use only element 12 of the 2 x 2 covariance matrix*/
720        								corrNonCases = sampleCovMatrixNonCases[ 1, 2 ] / stdT1NonCases / stdT2NonCases;
721        
722        								/*calculate AUC with complete disease status ascertainment*/
723        								completeAUCT1 = calculateAUC( errcode, cumErrors, meanT1Cases, meanT1NonCases,
723      ! stdT1Cases, stdT1NonCases );
724        								completeAUCT2 = calculateAUC( errcode, cumErrors, meanT2Cases, meanT2NonCases,
724      ! stdT2Cases, stdT2NonCases );
725        								completeHypTest = differenceInAUCHypothesisTest( errcode, cumErrors,
725      ! completeAUCT1[ , 1 ],
726        				 																 completeAUCT1[ , 2 ],
727        				 																 completeAUCT1[ , 3 ],
728        																				 completeAUCT2[ , 1 ],
729        																				 completeAUCT2[ , 2 ],
730        				 																 completeAUCT2[ , 3 ],
731        																				 corrCases,
732        																				 corrNonCases,
733        				                                                                 numberCases,
734        																				 numberNonCases );
735        
736        								/*check direction of rejection against population difference in AUC*/	
737        								if completeHypTest[ , 5 ] = 1 then do;
738        
17                                        The SAS System           13:43 Wednesday, April 24, 2013

739        									/*if the population difference is 0 but the comp/obs/corr rejects then mark
739      ! the direction of rejection as a 1*/
740        									/*also return an error so this kind of rejection can be separated from other
740      ! kinds*/
741        									if populationDeltaAUC = 0 then do;
742        										hypErrorComplete = 1;
743        										directionCompleteHypTest = 1;
744        									end;
745        
746        									/*if the population difference has the same sign as the comp/obs/corr
746      ! difference then the tests are in the same order*/
747        									/*this is a rejection in the correct direction*/
748        									else if ( populationDeltaAUC < 0 & completeHypTest[ , 1 ] < 0 ) |
749        					                        ( populationDeltaAUC > 0 & completeHypTest[ , 1 ] > 0 )
749      ! then do;
750        										hypErrorComplete = 0;
751        										directionCompleteHypTest = 1;
752        									end;
753        
754        									/*if the population difference has the opposite sign as the comp/obs/corr
754      ! difference then the tests are in the wrong order*/
755        									/*this is a rejection in the wrong or reverse direction*/
756        									else if ( populationDeltaAUC < 0 & completeHypTest[ , 1 ] > 0 ) |
757        								            ( populationDeltaAUC > 0 & completeHypTest[ , 1 ] < 0 ) then do;
758        										hypErrorComplete = 0;
759        										directionCompleteHypTest = -1;
760        									end;
761        
762        								end; /*end complete hyp test rejected*/
763        
764        								/*if the comp/obs/corr hyp test did not reject then set the direction of
764      ! rejection to 0*/
765        								else do;
766        									hypErrorComplete = 0;
767        									directionCompleteHypTest = 0;
768        								end; /*end complete hyp test failed to reject*/					
769        
770        								/*now do the observed cases and non-cases*/
771        								obsCases = matrix[ loc( indicateObsCases )`, ];
772        								obsNonCases = matrix[ loc( indicateObsNonCases )`, ];
773        
774        								/*find mean, std, corr*/
775        								/*cases*/
776        								meanT1ObsCases = mean( obsCases[ , 4 ] );
777        								meanT2ObsCases = mean( obsCases[ , 5 ] );
778        								covMatrixObsCases = cov( obsCases[ , 4 ] || obsCases[ , 5 ] );
779        
780        								stdT1ObsCases = sqrt( covMatrixObsCases[ 1, 1 ] );
781        								stdT2ObsCases = sqrt( covMatrixObsCases[ 2, 2 ] );
782        
783        								/*use only element 12 of the 2 x 2 covariance matrix*/
784        								corrObsCases = covMatrixObsCases[ 1, 2 ] / stdT1ObsCases / stdT2ObsCases;
785        
18                                        The SAS System           13:43 Wednesday, April 24, 2013

786        								/*non-cases*/
787        								meanT1ObsNonCases = mean( obsNonCases[ , 4 ] );
788        								meanT2ObsNonCases = mean( obsNonCases[ , 5 ] );
789        								covMatrixObsNonCases = cov( obsNonCases[ , 4 ] || obsNonCases[ , 5 ] );
790        
791        								stdT1ObsNonCases = sqrt( covMatrixObsNonCases[ 1, 1 ] );
792        								stdT2ObsNonCases = sqrt( covMatrixObsNonCases[ 2, 2 ] );
793        
794        								/*use only element 12 of the 2 x 2 covariance matrix*/
795        								corrObsNonCases = covMatrixObsNonCases[ 1, 2 ] / stdT1ObsNonCases /
795      ! stdT2ObsNonCases;
796        
797        								/*calculate observed AUC*/
798        								observedAUCT1 = calculateAUC( errcode, cumErrors, meanT1ObsCases,
798      ! meanT1ObsNonCases, stdT1ObsCases, stdT1ObsNonCases );
799        								observedAUCT2 = calculateAUC( errcode, cumErrors, meanT2ObsCases,
799      ! meanT2ObsNonCases, stdT2ObsCases, stdT2ObsNonCases );
800        
801        								observedHypTest = differenceInAUCHypothesisTest( errcode, cumErrors,
801      ! observedAUCT1[ , 1 ],
802        				 																 observedAUCT1[ , 2 ],
803        				 																 observedAUCT1[ , 3 ],
804        																				 observedAUCT2[ , 1 ],
805        																				 observedAUCT2[ , 2 ],
806        				 																 observedAUCT2[ , 3 ],
807        																				 corrObsCases,
808        																				 corrObsNonCases,
809        				                                                                 numberObsCases,
810        																				 numberObsNonCases );
811        
812        								/*calculate bias in difference in AUC*/
813        								if observedHypTest[ , 1 ] ^= &errorCode then bias = observedHypTest[ , 1 ] -
813      ! completeHypTest[ , 1 ];
814        									else bias = &errorCode;
815        
816        								/*check direction of rejection against population difference in AUC*/	
817        								if observedHypTest[ , 5 ] = 1 then do;
818        
819        									/*if the population difference is 0 but the comp/obs/corr rejects then mark
819      ! the direction of rejection as a 1*/
820        									/*also return an error so this kind of rejection can be separated from other
820      ! kinds*/
821        									if populationDeltaAUC = 0 then do;
822        										hypErrorObserved = 1;
823        										directionObservedHypTest = 1;
824        									end;
825        
826        									/*if the population difference has the same sign as the comp/obs/corr
826      ! difference then the tests are in the same order*/
827        									/*this is a rejection in the correct direction*/
828        									else if ( populationDeltaAUC < 0 & observedHypTest[ , 1 ] < 0 ) |
829        					                        ( populationDeltaAUC > 0 & observedHypTest[ , 1 ] > 0 )
829      ! then do;
19                                        The SAS System           13:43 Wednesday, April 24, 2013

830        										hypErrorObserved = 0;
831        										directionObservedHypTest = 1;
832        									end;
833        
834        									/*if the population difference has the opposite sign as the comp/obs/corr
834      ! difference then the tests are in the wrong order*/
835        									/*this is a rejection in the wrong or reverse direction*/
836        									else if ( populationDeltaAUC < 0 & observedHypTest[ , 1 ] > 0 ) |
837        								            ( populationDeltaAUC > 0 & observedHypTest[ , 1 ] < 0 ) then do;
838        										hypErrorObserved = 0;
839        										directionObservedHypTest = -1;
840        									end;
841        
842        								end; /*end obs hyp test rejected*/
843        
844        								/*if the comp/obs/corr hyp test did not reject then set the direction of
844      ! rejection to 0*/
845        								else do;
846        									hypErrorObserved = 0;
847        									directionObservedHypTest = 0;
848        								end; /*end obs hyp test failed to reject*/
849        
850        								/*calculate recall rate for cases for each test*/
851        								/*proportion of cases who test positive and are recalled for biopsy*/
852        								/*number of t1screen pos / number of participants given t1*/
853        								/*id, disease, ss, t1score, t2score*/
854        								numberT1ScreenPosSSCases = sum( ( matrix[ , 2 ] = 1 &
855        			                                                    ( matrix[ , 4 ] >= cutoffs[ , 1
855      ! ] |
856        			                                                    ( matrix[ , 4 ] < cutoffs[ , 1 ]
856      !  &
857        			                                                      matrix[ , 5 ] < cutoffs[ , 2 ]
857      !  &
858        			                                                      matrix[ , 3 ] = 1 ) ) )` );
859        
860        								numberT2ScreenPosSSCases = sum( ( matrix[ , 2 ] = 1 &
861        			                                                    ( matrix[ , 5 ] >= cutoffs[ , 2
861      ! ] |
862        			                                                    ( matrix[ , 4 ] < cutoffs[ , 1 ]
862      !  &
863        			                                                      matrix[ , 5 ] < cutoffs[ , 2 ]
863      !  &
864        			                                                      matrix[ , 3 ] = 1 ) ) )` );
865        
866        						        numberGoldStandardCases = sum( ( matrix[ , 2 ] = 1 &
867        								                               ( matrix[ , 4 ] >= cutoffs[ , 1 ] |
868        													             matrix[ , 5 ] >= cutoffs[ , 2 ] |
869        			                                                     matrix[ , 3 ] = 1 ) )` );
870        
871        								posT1SSGoldStd = numberT1ScreenPosSSCases / numberCases;
872        								posT2SSGoldStd = numberT2ScreenPosSSCases / numberCases;
873        								GoldStd = numberGoldStandardCases / numberCases;
874        
20                                        The SAS System           13:43 Wednesday, April 24, 2013

875        								/*Observed cases in quadrant 1: disease = 1 and both test scores are above
875      ! their thresholds*/
876        							    indicateObsCasesQuadrant1 = ( matrix[ , 2 ] = 1 &
877        					                                          matrix[ , 4 ] >= cutoffs[ , 1 ] &
878        					                                          matrix[ , 5 ] >= cutoffs[ , 2 ] )`;				
879        
880        								/*Observed cases in quadrant 2: disease = 1, test 1 score above threshold, test
880      !  2 score below threshold*/
881        							    indicateObsCasesQuadrant2 = ( matrix[ , 2 ] = 1 &
882        					                                          matrix[ , 4 ] >= cutoffs[ , 1 ] &
883        					                                          matrix[ , 5 ] < cutoffs[ , 2 ] )`;
884        
885        								/*Observed cases in quadrant 3: disease = 1, test 1 score below threshold, test
885      !  2 score above threshold*/
886        							    indicateObsCasesQuadrant3 = ( matrix[ , 2 ] = 1 &
887        					                                          matrix[ , 4 ] < cutoffs[ , 1 ] &
888        					                                          matrix[ , 5 ] >= cutoffs[ , 2 ] )`;
889        
890        								/*Observed cases in quadrant 4: disease = 1, test 1 score below threshold, test
890      !  2 score below threshold, ss = 1*/
891        							    indicateObsCasesQuadrant4 = ( matrix[ , 2 ] = 1 &
892        						                                      matrix[ , 4 ] < cutoffs[ , 1 ] &
893        						                                      matrix[ , 5 ] < cutoffs[ , 2 ] &
894        						                                      matrix[ , 3 ] = 1 )`;
895        
896        								/*calculate the number of observed cases in each quadrant and in the first
896      ! three quadrants together*/
897        								numberObsCasesQuadrant1 = sum( indicateObsCasesQuadrant1 );
898        								numberObsCasesQuadrant2 = sum( indicateObsCasesQuadrant2 );
899        								numberObsCasesQuadrant3 = sum( indicateObsCasesQuadrant3 );
900        								numberObsCasesQ123 = numberObsCasesQuadrant1 +
901        								                     numberObsCasesQuadrant2 +
902        											         numberObsCasesQuadrant3;
903        								numberObsCasesQuadrant4 = numberObsCases - numberObsCasesQ123;
904        
905        								/*if there are < 2 observed cases quadrants 1, 2, and 3 together*/
906        								/*then return an error and do not calculate summary statistics for quadrants 1,
906      !  2, and 3*/	
907        								if numberObsCasesQ123 < 2 then do;
908        									
909        									empty123 = 1;
910        									empty1 = 1;
911        									empty2 = 1;
912        									empty3 = 1;
913        									meanT1ObsCasesQuadrant1 = &errorCode;
914        									meanT2ObsCasesQuadrant1 = &errorCode;
915        									stdT1ObsCasesQuadrant1 = &errorCode;
916        									stdT2ObsCasesQuadrant1 = &errorCode;
917        									corrObsCasesQuadrant1 = &errorCode;
918        									outcome1 = &errorCode;
919        									nathQ1Row = &errorCode || &errorCode || &errorCode || &errorCode || &errorCode
919      !  || &errorCode || &errorCode ;
920        									logLQ1 = &errorCode;
21                                        The SAS System           13:43 Wednesday, April 24, 2013

921        									meanT1ObsCasesQuadrant2 = &errorCode;
922        									meanT2ObsCasesQuadrant2 = &errorCode;
923        									stdT1ObsCasesQuadrant2 = &errorCode;
924        									stdT2ObsCasesQuadrant2 = &errorCode;
925        									corrObsCasesQuadrant2 = &errorCode;
926        									outcome2 = &errorCode;
927        									nathQ2Row = &errorCode || &errorCode || &errorCode || &errorCode || &errorCode
927      !  || &errorCode || &errorCode ;
928        									logLQ2 = &errorCode;
929        									meanT1ObsCasesQuadrant3 = &errorCode;
930        									meanT2ObsCasesQuadrant3 = &errorCode;
931        									stdT1ObsCasesQuadrant3 = &errorCode;
932        									stdT2ObsCasesQuadrant3 = &errorCode;
933        									corrObsCasesQuadrant3 = &errorCode;
934        									outcome3 = &errorCode;
935        									nathQ3Row = &errorCode || &errorCode || &errorCode || &errorCode || &errorCode
935      !  || &errorCode || &errorCode ;
936        									logLQ3 = &errorCode;
937        									meanT1ObsCasesQ123 = &errorCode;
938        									meanT2ObsCasesQ123 = &errorCode;
939        									stdT1ObsCasesQ123 = &errorCode;
940        									stdT2ObsCasesQ123 = &errorCode;
941        									corrObsCasesQ123 = &errorCode;
942        
943        									/*Since Q123 is empty, then all observations must be in Q4*/
944        									/*Calculate summary stats for Q4 only*/
945        									empty4 = 0;
946        
947        									obsCasesQuadrant4 = matrix[ loc( indicateObsCasesQuadrant4 )`, ];
948        
949        									/*find mean, std, corr*/
950        									meanT1ObsCasesQuadrant4 = mean( obsCasesQuadrant4[ , 4 ] );
951        									meanT2ObsCasesQuadrant4 = mean( obsCasesQuadrant4[ , 5 ] );
952        									covMatrixObsCasesQuadrant4 = cov( obsCasesQuadrant4[ , 4 ] ||
952      ! obsCasesQuadrant4[ , 5 ] );
953        
954        									stdT1ObsCasesQuadrant4 = sqrt( covMatrixObsCasesQuadrant4[ 1, 1 ] );
955        									stdT2ObsCasesQuadrant4 = sqrt( covMatrixObsCasesQuadrant4[ 2, 2 ] );
956        
957        									/*use only element 12 of the 2 x 2 covariance matrix*/
958        									corrObsCasesQuadrant4 = covMatrixObsCasesQuadrant4[ 1, 2 ] /
958      ! stdT1ObsCasesQuadrant4 / stdT2ObsCasesQuadrant4;		
959        
960        									/*run nath algorithm*/
961        									nathQ4Row = nathAlgorithm( errcode, cumErrors, &tolerance, &maxIterations,
961      ! &errorCode, 4, cutoffs[ , 1 ], cutoffs[ , 2 ],
962        						                                       meanT1ObsCasesQuadrant4,
962      ! meanT2ObsCasesQuadrant4,
963        						                                       stdT1ObsCasesQuadrant4,
963      ! stdT2ObsCasesQuadrant4,
964        						                                       corrObsCasesQuadrant4 );
965        
966        									/*outcome of nath algorithm*/
22                                        The SAS System           13:43 Wednesday, April 24, 2013

967        									outcome4 = nathQ4Row[ , 2 ];
968        
969        									/*maximize the log likelihood if the algorithm converged*/
970        									if outcome4 = 0 then logLQ4 = maximizeLogLikelihood( errcode, cumErrors,
970      ! numberObsCases, nathQ4Row[ , 3 ], nathQ4Row[ , 4 ],
971        						                                           		                 nathQ4Row[ , 5 ],
971      ! nathQ4Row[ , 6 ], nathQ4Row[ , 7 ],
972        						                                            	                 meanT1ObsCases,
972      ! meanT2ObsCases,
973        						                                            	                 stdT1ObsCases,
973      ! stdT2ObsCases,
974        						                                            	                 corrObsCases );
975        
976        									else logLQ4 = &errorCode;
977        				
978        								end; /*end q123 is empty*/
979        
980        								else do;
981        									empty123 = 0;
982        
983        									/*Observed cases in area 1: disease = 1 and at least one test score is above
983      ! its threshold*/
984        							   		indicateObsCasesQ123 = ( indicateObsCasesQuadrant1 |
985        				                                             indicateObsCasesQuadrant2 |
986        				                                             indicateObsCasesQuadrant3 );
987        
988        									obsCasesQ123 = matrix[ loc( indicateObsCasesQ123 )`, ];
989        
990        									/*find mean, std, corr*/
991        									meanT1ObsCasesQ123 = mean( obsCasesQ123[ , 4 ] );
992        									meanT2ObsCasesQ123 = mean( obsCasesQ123[ , 5 ] );
993        									covMatrixObsCasesQ123 = cov( obsCasesQ123[ , 4 ] || obsCasesQ123[ , 5 ] );
994        
995        									stdT1ObsCasesQ123 = sqrt( covMatrixObsCasesQ123[ 1, 1 ] );
996        									stdT2ObsCasesQ123 = sqrt( covMatrixObsCasesQ123[ 2, 2 ] );
997        
998        									/*use only element 12 of the 2 x 2 covariance matrix*/
999        									corrObsCasesQ123 = covMatrixObsCasesQ123[ 1, 2 ] / stdT1ObsCasesQ123 /
999      ! stdT2ObsCasesQ123;
1000       
1001       									/*if the quadrant has < 2 obs cases then do not calculate summary statistics*/
1002       									/*otherwise calculate summary statistics*/
1003       									if numberObsCasesQuadrant1 < 2 then do;
1004       										
1005       										empty1 = 1;
1006       										meanT1ObsCasesQuadrant1 = &errorCode;
1007       										meanT2ObsCasesQuadrant1 = &errorCode;
1008       										stdT1ObsCasesQuadrant1 = &errorCode;
1009       										stdT2ObsCasesQuadrant1 = &errorCode;
1010       										corrObsCasesQuadrant1 = &errorCode;
1011       										outcome1 = &errorCode;
1012       										nathQ1Row = &errorCode || &errorCode || &errorCode || &errorCode ||
1012     ! &errorCode || &errorCode || &errorCode ;
23                                        The SAS System           13:43 Wednesday, April 24, 2013

1013       										logLQ1 = &errorCode;
1014       									end; /*end quadrant 1 is empty*/
1015       
1016       									else do;
1017       										empty1 = 0;
1018       										obsCasesQuadrant1 = matrix[ loc( indicateObsCasesQuadrant1 )`, ];
1019       
1020       										/*find mean, std, corr*/
1021       										meanT1ObsCasesQuadrant1 = mean( obsCasesQuadrant1[ , 4 ] );
1022       										meanT2ObsCasesQuadrant1 = mean( obsCasesQuadrant1[ , 5 ] );
1023       										covMatrixObsCasesQuadrant1 = cov( obsCasesQuadrant1[ , 4 ] ||
1023     ! obsCasesQuadrant1[ , 5 ] );
1024       
1025       										stdT1ObsCasesQuadrant1 = sqrt( covMatrixObsCasesQuadrant1[ 1, 1 ] );
1026       										stdT2ObsCasesQuadrant1 = sqrt( covMatrixObsCasesQuadrant1[ 2, 2 ] );
1027       
1028       										/*use only element 12 of the 2 x 2 covariance matrix*/
1029       										corrObsCasesQuadrant1 = covMatrixObsCasesQuadrant1[ 1, 2 ] /
1029     ! stdT1ObsCasesQuadrant1 / stdT2ObsCasesQuadrant1;
1030       
1031       										/*run nath algorithm*/
1032       										nathQ1Row = nathAlgorithm( errcode, cumErrors, &tolerance, &maxIterations,
1032     ! &errorCode, 1, cutoffs[ , 1 ], cutoffs[ , 2 ],
1033       							                                       meanT1ObsCasesQuadrant1,
1033     ! meanT2ObsCasesQuadrant1,
1034       							                                       stdT1ObsCasesQuadrant1,
1034     ! stdT2ObsCasesQuadrant1,
1035       							                                       corrObsCasesQuadrant1 );
1036       
1037       										/*outcome of nath algorithm*/
1038       										outcome1 = nathQ1Row[ , 2 ];
1039       
1040       										/*maximize the log likelihood if the algorithm converged*/
1041       										if outcome1 = 0 then logLQ1 = maximizeLogLikelihood( errcode, cumErrors,
1041     ! numberObsCases, nathQ1Row[ , 3 ], nathQ1Row[ , 4 ],
1042       							                                           		                 nathQ1Row[ , 5 ],
1042     ! nathQ1Row[ , 6 ], nathQ1Row[ , 7 ],
1043       							                                            	                 meanT1ObsCases,
1043     ! meanT2ObsCases,
1044       							                                            	                 stdT1ObsCases,
1044     ! stdT2ObsCases,
1045       							                                            	                 corrObsCases );
1046       
1047       										else logLQ1 = &errorCode;
1048       
1049       									end; /*end quadrant 1 is not empty*/
1050       
1051       									if numberObsCasesQuadrant2 < 2 then do;
1052       										
1053       										empty2 = 1;
1054       										meanT1ObsCasesQuadrant2 = &errorCode ;
1055       										meanT2ObsCasesQuadrant2 = &errorCode ;
1056       										stdT1ObsCasesQuadrant2 = &errorCode ;
24                                        The SAS System           13:43 Wednesday, April 24, 2013

1057       										stdT2ObsCasesQuadrant2 = &errorCode ;
1058       										corrObsCasesQuadrant2 = &errorCode ;
1059       										outcome2 = &errorCode;
1060       										nathQ2Row = &errorCode || &errorCode || &errorCode || &errorCode ||
1060     ! &errorCode || &errorCode || &errorCode ;
1061       										logLQ2 = &errorCode;
1062       
1063       									end; /*end quadrant 2 is empty*/
1064       
1065       									else do;
1066       										empty2 = 0;
1067       										obsCasesQuadrant2 = matrix[ loc( indicateObsCasesQuadrant2 )`, ];
1068       
1069       										/*find mean, std, corr*/
1070       										meanT1ObsCasesQuadrant2 = mean( obsCasesQuadrant2[ , 4 ] );
1071       										meanT2ObsCasesQuadrant2 = mean( obsCasesQuadrant2[ , 5 ] );
1072       										covMatrixObsCasesQuadrant2 = cov( obsCasesQuadrant2[ , 4 ] ||
1072     ! obsCasesQuadrant2[ , 5 ] );
1073       
1074       										stdT1ObsCasesQuadrant2 = sqrt( covMatrixObsCasesQuadrant2[ 1, 1 ] );
1075       										stdT2ObsCasesQuadrant2 = sqrt( covMatrixObsCasesQuadrant2[ 2, 2 ] );
1076       
1077       										/*use only element 12 of the 2 x 2 covariance matrix*/
1078       										corrObsCasesQuadrant2 = covMatrixObsCasesQuadrant2[ 1, 2 ] /
1078     ! stdT1ObsCasesQuadrant2 / stdT2ObsCasesQuadrant2;
1079       
1080       										/*run nath algorithm*/
1081       										nathQ2Row = nathAlgorithm( errcode, cumErrors, &tolerance, &maxIterations,
1081     ! &errorCode, 2, cutoffs[ , 1 ], cutoffs[ , 2 ],
1082       							                                       meanT1ObsCasesQuadrant2,
1082     ! meanT2ObsCasesQuadrant2,
1083       							                                       stdT1ObsCasesQuadrant2,
1083     ! stdT2ObsCasesQuadrant2,
1084       							                                       corrObsCasesQuadrant2 );
1085       
1086       										/*outcome of nath algorithm*/
1087       										outcome2 = nathQ2Row[ , 2 ];
1088       
1089       										/*maximize the log likelihood if the algorithm converged*/
1090       										if outcome2 = 0 then logLQ2 = maximizeLogLikelihood( errcode, cumErrors,
1090     ! numberObsCases, nathQ2Row[ , 3 ], nathQ2Row[ , 4 ],
1091       							                                           		                 nathQ2Row[ , 5 ],
1091     ! nathQ2Row[ , 6 ], nathQ2Row[ , 7 ],
1092       							                                            	                 meanT1ObsCases,
1092     ! meanT2ObsCases,
1093       							                                            	                 stdT1ObsCases,
1093     ! stdT2ObsCases,
1094       							                                            	                 corrObsCases );
1095       
1096       										else logLQ2 = &errorCode;
1097       
1098       									end; /*end quadrant 2 is not empty*/
1099       
25                                        The SAS System           13:43 Wednesday, April 24, 2013

1100       									if numberObsCasesQuadrant3 < 2 then do;
1101       										
1102       										empty3 = 1;
1103       										meanT1ObsCasesQuadrant3 = &errorCode;
1104       										meanT2ObsCasesQuadrant3 = &errorCode;
1105       										stdT1ObsCasesQuadrant3 = &errorCode;
1106       										stdT2ObsCasesQuadrant3 = &errorCode;
1107       										corrObsCasesQuadrant3 = &errorCode;
1108       										outcome3 = &errorCode;
1109       										nathQ3Row = &errorCode || &errorCode || &errorCode || &errorCode ||
1109     ! &errorCode || &errorCode || &errorCode ;
1110       										logLQ3 = &errorCode;
1111       									end; /*end quadrant 3 is empty*/
1112       
1113       									else do;
1114       										empty3 = 0;
1115       										obsCasesQuadrant3 = matrix[ loc( indicateObsCasesQuadrant3 )`, ];
1116       
1117       										/*find mean, std, corr*/
1118       										meanT1ObsCasesQuadrant3 = mean( obsCasesQuadrant3[ , 4 ] );
1119       										meanT2ObsCasesQuadrant3 = mean( obsCasesQuadrant3[ , 5 ] );
1120       										covMatrixObsCasesQuadrant3 = cov( obsCasesQuadrant3[ , 4 ] ||
1120     ! obsCasesQuadrant3[ , 5 ] );
1121       
1122       										stdT1ObsCasesQuadrant3 = sqrt( covMatrixObsCasesQuadrant3[ 1, 1 ] );
1123       										stdT2ObsCasesQuadrant3 = sqrt( covMatrixObsCasesQuadrant3[ 2, 2 ] );
1124       
1125       										/*use only element 12 of the 2 x 2 covariance matrix*/
1126       										corrObsCasesQuadrant3 = covMatrixObsCasesQuadrant3[ 1, 2 ] /
1126     ! stdT1ObsCasesQuadrant3 / stdT2ObsCasesQuadrant3;
1127       
1128       										/*run nath algorithm*/
1129       										nathQ3Row = nathAlgorithm( errcode, cumErrors, &tolerance, &maxIterations,
1129     ! &errorCode, 3, cutoffs[ , 1 ], cutoffs[ , 2 ],
1130       							                                       meanT1ObsCasesQuadrant3,
1130     ! meanT2ObsCasesQuadrant3,
1131       							                                       stdT1ObsCasesQuadrant3,
1131     ! stdT2ObsCasesQuadrant3,
1132       							                                       corrObsCasesQuadrant3 );
1133       
1134       										/*outcome of nath algorithm*/
1135       										outcome3 = nathQ3Row[ , 2 ];
1136       
1137       										/*maximize the log likelihood if the algorithm converged*/
1138       										if outcome3 = 0 then logLQ3 = maximizeLogLikelihood( errcode, cumErrors,
1138     ! numberObsCases, nathQ3Row[ , 3 ], nathQ3Row[ , 4 ],
1139       							                                           		                 nathQ3Row[ , 5 ],
1139     ! nathQ3Row[ , 6 ], nathQ3Row[ , 7 ],
1140       							                                            	                 meanT1ObsCases,
1140     ! meanT2ObsCases,
1141       							                                            	                 stdT1ObsCases,
1141     ! stdT2ObsCases,
1142       							                                            	                 corrObsCases );
26                                        The SAS System           13:43 Wednesday, April 24, 2013

1143       
1144       										else logLQ3 = &errorCode;
1145       
1146       									end; /*end quadrant 3 is not empty*/
1147       
1148       									/*if there are < 2 observed cases in quadrant 4*/
1149       									/*then return an error and do not calculate summary statistics for quadrant
1149     ! 4*/
1150       									/*otherwise calculate summary statistics*/
1151       									if numberObsCasesQuadrant4 < 2 then do;
1152       										
1153       										empty4 = 1;
1154       										meanT1ObsCasesQuadrant4 = &errorCode;
1155       										meanT2ObsCasesQuadrant4 = &errorCode;
1156       										stdT1ObsCasesQuadrant4 = &errorCode;
1157       										stdT2ObsCasesQuadrant4 = &errorCode;
1158       										corrObsCasesQuadrant4 = &errorCode;
1159       										outcome4 = &errorCode;
1160       										nathQ4Row = &errorCode || &errorCode || &errorCode || &errorCode ||
1160     ! &errorCode || &errorCode || &errorCode ;
1161       										logLQ4 = &errorCode;
1162       										meanT1ObsCasesQ123 = &errorCode;
1163       										meanT2ObsCasesQ123 = &errorCode;
1164       										stdT1ObsCasesQ123 = &errorCode;
1165       										stdT2ObsCasesQ123 = &errorCode;
1166       										corrObsCasesQ123 = &errorCode;	
1167       									end; /*end quadrant 4 is empty*/
1168       
1169       									else do;
1170       										empty4 = 0;
1171       
1172       										obsCasesQuadrant4 = matrix[ loc( indicateObsCasesQuadrant4 )`, ];
1173       
1174       										/*find mean, std, corr*/
1175       										meanT1ObsCasesQuadrant4 = mean( obsCasesQuadrant4[ , 4 ] );
1176       										meanT2ObsCasesQuadrant4 = mean( obsCasesQuadrant4[ , 5 ] );
1177       										covMatrixObsCasesQuadrant4 = cov( obsCasesQuadrant4[ , 4 ] ||
1177     ! obsCasesQuadrant4[ , 5 ] );
1178       
1179       										stdT1ObsCasesQuadrant4 = sqrt( covMatrixObsCasesQuadrant4[ 1, 1 ] );
1180       										stdT2ObsCasesQuadrant4 = sqrt( covMatrixObsCasesQuadrant4[ 2, 2 ] );
1181       
1182       										/*use only element 12 of the 2 x 2 covariance matrix*/
1183       										corrObsCasesQuadrant4 = covMatrixObsCasesQuadrant4[ 1, 2 ] /
1183     ! stdT1ObsCasesQuadrant4 / stdT2ObsCasesQuadrant4;
1184       
1185       										/*run nath algorithm*/
1186       										nathQ4Row = nathAlgorithm( errcode, cumErrors,
1187       															       &tolerance, &maxIterations, &errorCode, 4, cutoffs[ , 1 ],
1187     ! cutoffs[ , 2 ],
1188       							                                       meanT1ObsCasesQuadrant4,
1188     ! meanT2ObsCasesQuadrant4,
1189       							                                       stdT1ObsCasesQuadrant4,
27                                        The SAS System           13:43 Wednesday, April 24, 2013

1189     ! stdT2ObsCasesQuadrant4,
1190       							                                       corrObsCasesQuadrant4 );
1191       
1192       										/*outcome of nath algorithm*/
1193       										outcome4 = nathQ4Row[ , 2 ];
1194       
1195       										/*maximize the log likelihood if the algorithm converged*/
1196       										if outcome4 = 0 then logLQ4 = maximizeLogLikelihood( errcode, cumErrors,
1196     ! numberObsCases, nathQ4Row[ , 3 ], nathQ4Row[ , 4 ],
1197       							                                           		                 nathQ4Row[ , 5 ],
1197     ! nathQ4Row[ , 6 ], nathQ4Row[ , 7 ],
1198       							                                            	                 meanT1ObsCases,
1198     ! meanT2ObsCases,
1199       							                                            	                 stdT1ObsCases,
1199     ! stdT2ObsCases,
1200       							                                            	                 corrObsCases );
1201       
1202       										else logLQ4 = &errorCode;	
1203       
1204       									end; /*end quadrant 4 is not empty*/
1205       
1206       								end; /*end q123 is not empty*/
1207       
1208       								/*if the Nath estimates are missing for all 4 quadrants then set remaining
1208     ! values to missing*/
1209       								if ( outcome1 ^= 0 &
1210       				                     outcome2 ^= 0 &
1211       				                     outcome3 ^= 0 &
1212       				                     outcome4 ^= 0 ) then do;
1213       									
1214       									nathError = 1;
1215       									weighted = &errorCode;
1216       									correctedNumberCasesError = &errorCode;
1217       									nathEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode ||
1217     ! &errorCode || &errorCode || &errorCode || &errorCode|| &errorCode ;
1218       									bivariateNormalProbabilitiesNath = &errorCode || &errorCode ;
1219       									bivNormProbsWeighted = &errorCode || &errorCode ;
1220       									correctedNumberCasesNonCases = &errorCode || &errorCode ;
1221       									weightedEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode ||
1221     !  &errorCode ;
1222       									correctedEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode
1222     ! || &errorCode ;
1223       									correctedAUCT1 = &errorCode || &errorCode || &errorCode ;
1224       									correctedAUCT2 = &errorCode || &errorCode || &errorCode ;
1225       									correctedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
1225     ! &errorCode ;
1226       									hypErrorCorrected = &errorCode ;
1227       									directionCorrectedHypTest = &errorCode ;
1228       									uncorrectedBias = &errorCode ;
1229       								end; /*end nath algorithm did not converge in any quadrants*/
1230       
1231       								else do;
1232       
28                                        The SAS System           13:43 Wednesday, April 24, 2013

1233       									nathError = 0;
1234       									/*combine logL with estimates*/
1235       									nathAndLogLQ1Row = 1 || logLQ1 || nathQ1Row;
1236       									nathAndLogLQ2Row = 2 || logLQ2 || nathQ2Row;
1237       									nathAndLogLQ3Row = 3 || logLQ3 || nathQ3Row;
1238       									nathAndLogLQ4Row = 4 || logLQ4 || nathQ4Row;
1239       
1240       									/*stack quadrant nath estimates*/
1241       									nathCandidates = nathAndLogLQ1Row // nathAndLogLQ2Row // nathAndLogLQ3Row //
1241     ! nathAndLogLQ4Row;
1242       
1243       									/*pick off nath rows that have outcome = 0*/
1244       									nathCandidatesConverged = nathCandidates[ loc( nathCandidates[ , 4 ] = 0 )`, ]
1244     ! ;
1245       							
1246       									/*choose the row with the maximum log likelihood as the nath estimates*/
1247       									nathEstimatesRow = nathCandidatesConverged[ nathCandidatesConverged[ <:>, 2 ],
1247     !  ];
1248       
1249       									/*calculate bivariate probabilities based on nath estimates*/
1250       								    bivariateNormalProbabilitiesNath = estimateBivNormProbabilities( errcode,
1250     ! cumErrors, cutoffs[ , 1 ], cutoffs[ , 2 ],
1251       							
1251     ! nathEstimatesRow[ , 5  ], nathEstimatesRow[ , 6 ],
1252       							
1252     ! nathEstimatesRow[ , 7 ], nathEstimatesRow[ , 8 ],
1253       							
1253     ! nathEstimatesRow[ , 9 ], &errorCode );
1254       
1255       									/*if q123 or q4 are empty then we cannot calculate the weighted estimates*/
1256       									/*instead, we use the nath estimates as the corrected estimates*/
1257       									if empty123 = 1 | empty4 = 1 then do;
1258       										weighted = 0;
1259       										weightedEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode
1259     ! || &errorCode ;
1260       										bivNormProbsWeighted = &errorCode || &errorCode ;
1261       
1262       										/*calculate corrected number of cases/non-cases based on bivariate
1262     ! probabilities*/
1263       										correctedEstimatesRow = nathEstimatesRow[ , { 5, 6, 7, 8, 9 } ];
1264       										correctedNumberCasesNonCases = calcCorrectedNumCasesNonCases( errcode,
1264     ! cumErrors, bivariateNormalProbabilitiesNath[ , 1 ],
1265       								            													      &sampSize, numberObsCasesQ123 );
1266       									end; /*end use corrected estimates*/
1267       
1268       									/*if there are at least 2 observations in q123 AND q4 then we can calculate
1268     ! the weighted estimates*/
1269       									/*we will use these estimates as the corrected estimates*/
1270       									else do;
1271       										weighted = 1;
1272       
1273       										weightedEstimatesRow = calculateWeightedEstimates(
1273     ! bivariateNormalProbabilitiesNath[ , 1 ],
29                                        The SAS System           13:43 Wednesday, April 24, 2013

1274       																						   bivariateNormalProbabilitiesNath[ , 2 ],
1275       																						   meanT1ObsCasesQ123, meanT2ObsCasesQ123,
1276       																						   stdT1ObsCasesQ123, stdT2ObsCasesQ123,
1277       																						   corrObsCasesQ123,
1278       																						   meanT1ObsCasesQuadrant4, meanT2ObsCasesQuadrant4,
1279                   																		       stdT1ObsCasesQuadrant4, stdT2ObsCasesQuadrant4,
1280        																				           corrObsCasesQuadrant4 );
1281       
1282       										correctedEstimatesRow = weightedEstimatesRow;
1283       										
1284       										/*recalculate bivariate normal probabilities using weighted estimates*/
1285       								 		bivNormProbsWeighted = estimateBivNormProbabilities( errcode, cumErrors,
1285     ! cutoffs[ , 1 ], cutoffs[ , 2 ],
1286       							
1286     ! weightedEstimatesRow[ , 1 ], weightedEstimatesRow[ , 2 ],
1287       							
1287     ! weightedEstimatesRow[ , 3 ], weightedEstimatesRow[ , 4 ],
1288       							
1288     ! weightedEstimatesRow[ , 5 ], &errorCode );
1289       
1290       										/*use the bivariate normal probabilities calculated from the weighted
1290     ! estimates to correct the number of cases*/
1291       										correctedNumberCasesNonCases = calcCorrectedNumCasesNonCases( errcode,
1291     ! cumErrors, bivNormProbsWeighted[ , 1 ],
1292       								            													      &sampSize, numberObsCasesQ123 );
1293       
1294       									end; /*end use weighted estimates*/
1295       
1296       									/*sometimes the corrected number of cases will be greater than the sample
1296     ! size*/
1297       									/*this happens because the bivariate probabilties (f1, f2) are estimated with
1297     ! error*/
1298       									/*if the corrected number of cases is greater than the sample size, then do
1298     ! not bias correct*/
1299       									/*also, the corrected number of cases could be 0, which would blow up R in the
1299     !  hypothesis test*/
1300       									/*this is bad, so return an error if this happens and do not do bias
1300     ! correction*/
1301       									/*essentially, you cannot do bias correction if you have an extreme number of
1301     ! observed cases or non-cases*/
1302       									if ( correctedNumberCasesNonCases[ , 1 ] > &sampSize |
1303       		                                 correctedNumberCasesNonCases[ , 1 ] = 0 ) then do;
1304       									
1305       									   correctedNumberCasesError = 1;
1306       									   correctedAUCT1 = &errorCode || &errorCode || &errorCode ;
1307       									   correctedAUCT2 = &errorCode || &errorCode || &errorCode ;
1308       									   correctedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
1308     ! &errorCode ;
1309       									   hypErrorCorrected = &errorCode;
1310       									   directionCorrectedHypTest = &errorCode;
1311       									   uncorrectedBias = &errorCode;
1312       									end; /*end corrected number of cases is greater than sample size*/
1313       
30                                        The SAS System           13:43 Wednesday, April 24, 2013

1314       									else do;
1315       										correctedNumberCasesError = 0;	
1316       
1317       										/*calculate corrected AUC*/
1318       										correctedAUCT1 = calculateAUC( errcode, cumErrors, correctedEstimatesRow[ , 1
1318     !  ], meanT1ObsNonCases,
1319       						                                               correctedEstimatesRow[ , 3 ],
1319     ! stdT1ObsNonCases );
1320       										correctedAUCT2 = calculateAUC( errcode, cumErrors, correctedEstimatesRow[ , 2
1320     !  ], meanT2ObsNonCases,
1321       						                                               correctedEstimatesRow[ , 4 ],
1321     ! stdT2ObsNonCases );
1322       
1323       										correctedHypTest = differenceInAUCHypothesisTest( errcode, cumErrors,
1323     ! correctedAUCT1[ , 1 ],
1324       						 																  correctedAUCT1[ , 2 ],
1325       						 																  correctedAUCT1[ , 3 ],
1326       																						  correctedAUCT2[ , 1 ],
1327       																						  correctedAUCT2[ , 2 ],
1328       						 																  correctedAUCT2[ , 3 ],
1329       																						  correctedEstimatesRow[ , 5 ],
1330       																						  corrObsNonCases,
1331       						
1331     ! correctedNumberCasesNonCases[ , 1 ],
1332       																						  correctedNumberCasesNonCases[ , 2 ] );
1333       
1334       										/*calculate uncorrected bias in the difference in AUCs*/;
1335       										if correctedHypTest[ , 1 ] ^= &errorCode then uncorrectedBias =
1335     ! correctedHypTest[ , 1 ] - completeHypTest[ , 1 ];
1336       											else uncorrectedBias = &errorCode;
1337       
1338       										/*check direction of rejection against population difference in AUC*/	
1339       										if correctedHypTest[ , 5 ] = 1 then do;
1340       
1341       											/*if the population difference is 0 but the comp/obs/corr rejects then mark
1341     ! the direction of rejection as a 1*/
1342       											/*also return an error so this kind of rejection can be separated from other
1342     !  kinds*/
1343       											if populationDeltaAUC = 0 then do;
1344       												hypErrorCorrected = 1;
1345       												directionCorrectedHypTest = 1;
1346       											end;
1347       
1348       											/*if the population difference has the same sign as the comp/obs/corr
1348     ! difference then the tests are in the same order*/
1349       											/*this is a rejection in the correct direction*/
1350       											else if ( populationDeltaAUC < 0 & correctedHypTest[ , 1 ] < 0 ) |
1351       							                        ( populationDeltaAUC > 0 & correctedHypTest[ , 1 ] > 0 )
1351     !  then do;
1352       												hypErrorCorrected = 0;
1353       												directionCorrectedHypTest = 1;
1354       											end;
1355       
31                                        The SAS System           13:43 Wednesday, April 24, 2013

1356       											/*if the population difference has the opposite sign as the comp/obs/corr
1356     ! difference then the tests are in the wrong order*/
1357       											/*this is a rejection in the wrong or reverse direction*/
1358       											else if ( populationDeltaAUC < 0 & correctedHypTest[ , 1 ] > 0 ) |
1359       										            ( populationDeltaAUC > 0 & correctedHypTest[ , 1 ] < 0 ) then do;
1360       												hypErrorCorrected = 0;
1361       												directionCorrectedHypTest = -1;
1362       											end;
1363       
1364       										end; /*end corrected hypothesis test rejected*/
1365       
1366       										/*if the comp/obs/corr hyp test did not reject then set the direction of
1366     ! rejection to 0*/
1367       										else do;
1368       											hypErrorCorrected = 0;
1369       											directionCorrectedHypTest = 0;
1370       										end; /*end corrected hypothesis test failed to reject*/
1371       
1372       									end; /*end corrected number of cases is less than sample size*/
1373       							
1374       								end; /*end nath algorithm converged in at least one quadrant*/
1375       
1376       							end; /*end enough observed cases/non-cases*/
1377       
1378       						end; /*end enough true cases/non-cases*/
1379       
1380       						output =    rep || vectorRow ||
1381       								    trueError || obsError || nathError || weighted || correctedNumberCasesError
1381     !  ||
1382       									hypErrorComplete || hypErrorObserved || hypErrorCorrected ||
1383       								    empty123 || empty1 || empty2 || empty3 || empty4 ||
1384       
1385       									diseasePrevalence || rateSignsSymptoms || cutoffs || populationRhoCases ||
1385     ! populationRhoNonCases ||
1386       
1387       									maxIterations || tolerance || sampSize ||
1388       									tmuc1 || tmuc2 || tmun1 || tmun2 || tsigc1 || tsigc2 || tsign1 || tsign2 ||
1389       									
1390       									quadrantContainingMLECases || quadrantContainingMLENonCases ||
1391       
1392       					                numberCases ||
1393       								    meanT1Cases || meanT2Cases ||
1394       							        stdT1Cases || stdT2Cases ||
1395       							        corrCases ||
1396       
1397       							        numberNonCases ||
1398       							        meanT1NonCases || meanT2NonCases ||
1399       							        stdT1NonCases || stdT2NonCases ||
1400       							        corrNonCases ||
1401       
1402       							        numberObsCases ||
1403       					                meanT1ObsCases || meanT2ObsCases ||
1404       							        stdT1ObsCases || stdT2ObsCases ||
32                                        The SAS System           13:43 Wednesday, April 24, 2013

1405       								    corrObsCases ||
1406       
1407       							        numberObsNonCases ||
1408       					                meanT1ObsNonCases || meanT2ObsNonCases ||
1409       					                stdT1ObsNonCases || stdT2ObsNonCases ||
1410       								    corrObsNonCases ||
1411       
1412       									posT1SSGoldStd || posT2SSGoldStd ||	
1413       									GoldStd ||
1414       
1415       							        numberObsCasesQuadrant1 ||
1416       					                meanT1ObsCasesQuadrant1 || meanT2ObsCasesQuadrant1 ||
1417       							        stdT1ObsCasesQuadrant1 || stdT2ObsCasesQuadrant1 ||
1418       							        corrObsCasesQuadrant1 ||
1419       
1420       							        numberObsCasesQuadrant2 ||
1421       					                meanT1ObsCasesQuadrant2 || meanT2ObsCasesQuadrant2 ||
1422       							        stdT1ObsCasesQuadrant2 || stdT2ObsCasesQuadrant2 ||
1423       							        corrObsCasesQuadrant2 ||
1424       
1425       							        numberObsCasesQuadrant3 ||
1426       					                meanT1ObsCasesQuadrant3 || meanT2ObsCasesQuadrant3 ||
1427       							        stdT1ObsCasesQuadrant3 || stdT2ObsCasesQuadrant3 ||
1428       							        corrObsCasesQuadrant3 ||
1429       
1430       							        numberObsCasesQuadrant4 ||
1431       					                meanT1ObsCasesQuadrant4 || meanT2ObsCasesQuadrant4 ||
1432       							        stdT1ObsCasesQuadrant4 || stdT2ObsCasesQuadrant4 ||
1433       							        corrObsCasesQuadrant4 ||
1434       
1435       							        numberObsCasesQ123 ||
1436       					                meanT1ObsCasesQ123 || meanT2ObsCasesQ123 ||
1437       							        stdT1ObsCasesQ123 || stdT2ObsCasesQ123 ||
1438       							        corrObsCasesQ123 ||
1439       
1440       									outcome1 || outcome2 || outcome3 || outcome4 ||
1441       
1442       									nathEstimatesRow ||
1443       
1444       									bivariateNormalProbabilitiesNath || bivNormProbsWeighted ||
1445       
1446       								    correctedNumberCasesNonCases ||
1447       
1448       								    weightedEstimatesRow ||
1449       
1450       								    correctedEstimatesRow ||
1451       
1452       									populationAUCT1 || populationAUCT2 || populationDeltaAUC ||
1453       									completeAUCT1 || completeAUCT2 || completeHypTest || directionCompleteHypTest
1453     ! ||
1454       				                    observedAUCT1 || observedAUCT2 || observedHypTest || bias ||
1454     ! directionObservedHypTest ||
1455       				                    correctedAUCT1 || correctedAUCT2 || correctedHypTest ||
33                                        The SAS System           13:43 Wednesday, April 24, 2013

1455     ! uncorrectedBias || directionCorrectedHypTest;
1456       
1457       						errorsThisRep = cumErrors - pastErrors;
1458       
1459       						if errorsThisRep >= 1 then resumeError = 1;
1460       							else resumeError = 0;
1461       
1462       						pastErrors = cumErrors;
1463       
1464       						/*there should 163 columns in the output matrix (one row per rep)*/
1465       						/*if there are not 163 columns then add enough columns to make it that many*/
1466       						/*we do this so the output row can be appended to the previous output row, even
1466     ! if there was an error during the current iteration*/
1467       						if ( ncol( output ) ^= 165 ) then do;
1468       							columnError = 1;
1469       							additionalColumnsNeeded = 165 - ncol( output );
1470       							addColumns = j( 1, additionalColumnsNeeded, &errorCode );
1471       							results = output || addColumns || columnError || additionalColumnsNeeded ||
1472                                             resumeError || errorsThisRep || cumErrors;
1473       						end;
1474       
1475       						else do;
1476       							results = output || 0 || 0 || resumeError || errorsThisRep || cumErrors;
1477       
1478       						end;
1479       
1480       						append from results;
1481       
1482       					end; /*end repetition loop*/
1483       
1484       				end; /*end psi loop*/
1485       
1486       				cumErrors = -1;
1487       
1488       			finish; /* finish biasCorrection */
1489       
1490       			run biasCorrection;
1491       
1492       			
1493       
1494       		finish main; /* finish main */
1495       	
1496       
1497       		run; /* run main */
1498       			
1499       		close out01.results;
1500       
1501       	quit;
1502       
1503       %mend;
1504       

ERROR: Errors printed on page 2.
34                                        The SAS System           13:43 Wednesday, April 24, 2013


NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           0.36 seconds
      user cpu time       0.12 seconds
      system cpu time     0.06 seconds
      memory              3237.40k
      OS Memory           4132.00k
      Timestamp           04/24/2013 01:43:08 PM
      
