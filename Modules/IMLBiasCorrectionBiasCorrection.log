1                                         The SAS System           13:43 Wednesday, April 24, 2013

NOTE: Copyright (c) 2002-2010 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.3 (TS1M0) 
      Licensed to UNIVERSITY OF COLORADO - SFA T&R, Site 70082279.
NOTE: This session is executing on the X64_7PRO  platform.



NOTE: SAS initialization used:
      real time           0.33 seconds
      cpu time            0.15 seconds
      
1          /**************************************************************************************
1        ! ******
2          Created By:		Brandy Ringham
3          Creation Date:	12/12/11
4          
5          Description:
6          This macro bias corrects the AUC for randomly generated binormal data.  The motivating
7          example is a screening population where the sample consists of cases and non-cases.
7        ! There
8          are two screening test scores associated with each participant.  The means, variances,
8        ! and
9          correlations of the test scores are conditional on whether the participant is a case or
9        !  a
10         non-case.
11         
12         The user inputs required for the program are as follows:
13         seed        	seed for random number generation
14         errorCode		code for undefined entries - missing value not allowed,
15                         avoid values that could be misconstrued as a data point
16         nrep     		number of realizations of the study
17         sampsize 		sample size in each study
18         tolerance		tolerance of Nath algorithm
19         maxIteraions	maximum number of iterations allowed for Nath algorithm
20         tmuc1    		mean of test 1 scores for cases
21         tmuc2    		mean of test 2 scores for cases
22         tsigc1   		standard deviation of test 1 scores for cases
23         tsigc2   		standard deviation of test 2 scores for cases
24         trhoc    		correlation between test 1 and 2 scores for cases
25         tmun1    		mean of test 1 scores for non-cases
26         tmun2    		mean of test 2 scores for non-cases
27         tsign1   		standard deviation of test 1 scores for non-cases
28         tsign2   		standard deviation of test 2 scores for non-cases
29         trhon    		correlation between test 1 and 2 scores for non-cases
30         p      			disease prevalence
31         co1co2			cutoffs for tests 1 and 2
32         psi				rate of signs and symptoms
33         changer			variable that changes, choices are:  diseasePrevalence, rateSignsSymptoms,
34                         populationRhoCases, populationRhoNonCases, cutoffs
35         vector			vector or matrix of values for the changing variable
36         
37         ***************************************************************************************
37       ! *****/
2                                         The SAS System           13:43 Wednesday, April 24, 2013

38         
39         *assigns pathnames and storage library;
40         %include "CommonMacro.sas";
66         %include "../Macros/CommonMacro.sas";
WARNING: Physical file does not exist, C:\Users\munjala\Dropbox\Bias Correction R03 - 
         paired\BiasCorrectionSoftware\programs\Macros\CommonMacro.sas.
ERROR: Cannot open %INCLUDE file ../Macros/CommonMacro.sas.
67         
68         %CommonMacro;
Operating System: WIN
Macro Vault: C:\Users\munjala\Dropbox\Bias Correction R03 - 
paired\BiasCorrectionSoftware\programs\MacroVault
NOTE: Libref MLIB was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: C:\Users\munjala\Dropbox\Bias Correction R03 - 
      paired\BiasCorrectionSoftware\programs\MacroVault
98         
99         *simulate a whole bunch of bivariate normal stuff;
100        *subset it into quadrants;
101        *figure out which quadrants have < 2 observations;
102        *find summary statistics for quadrants with >= 2 observations;
103        %macro IMLBiasCorrectionBiasCorrection( seed, errorCode, nrep, sampsize, tolerance,
103      ! maxIterations, tmuc1, tmuc2, tsigc1, tsigc2, trhoc, tmun1,
104                                 tmun2, tsign1, tsign2, trhon, p, co1co2, psi, changer, vector
104      ! ) / store source;
105        
106        	*clear dataset;
107        	proc datasets lib = out01 nolist;
108        		delete results;
109        	run;
110        	quit;
111        
112        	*create empty file with preferred characteristics;
113        	data out01.results ( compress = no );
114        
115        		attrib
116        
117        		rep								length = 8 label = "Dataset ID"
118        		obsError						length = 8 label = "Less than 2 observed cases or non-cases"
119        		nathError						length = 8 label = "Nath algorithm did not converge in any quadrant"
120        		weighted						length = 8 label = "Source of corrected estimates (1 = weighted, 0 =
120      ! nath )"
121        		correctedNumberCasesError		length = 8 label = "Corrected Number of Cases Exceeded
121      ! Total Sample Size"
122        
123        		
124        		empty123						length = 8 label = "Less than 2 observed cases in quadrants 1, 2, and 3
124      !  together"
125        		empty1							length = 8 label = "Less than 2 observed cases in quadrant 1"
126        		empty2							length = 8 label = "Less than 2 observed cases in quadrant 2"
127        		empty3							length = 8 label = "Less than 2 observed cases in quadrant 3"
128        		empty4							length = 8 label = "Less than 2 observed cases in quadrant 4"
129        
3                                         The SAS System           13:43 Wednesday, April 24, 2013

130        		
131        		cutoffTest1						length = 8 label = "Cutoff for Test 1"
132        		cutoffTest2						length = 8 label = "Cutoff for Test 2"
133        
134        		
135        		nathMaxIterations				length = 8 label = "Maximum Number of Iterations for Nath
135      ! Algorithm"
136        		nathTolerance					length = 8 label = "Tolerance for Nath Algorithm"
137        		sampleSize						length = 8 label = "Sample Size"
138        
139        		
140        		numberObsCases					length = 8 label = "Number of Observed Cases"
141        		meanT1ObsCases					length = 8 label = "Test 1 Mean for Observed Cases"
142        	    meanT2ObsCases         			length = 8 label = "Test 2 Mean for Observed Cases"
143        	    stdT1ObsCases          			length = 8 label = "Test 1 Standard Deviation for
143      ! Observed Cases"
144        	    stdT2ObsCases					length = 8 label = "Test 2 Standard Deviation for Observed
144      ! Cases"
145        	    corrObsCases					length = 8 label = "Correlation Between Observed Cases"
146        		numberObsNonCases				length = 8 label = "Number of Observed Non-Cases"
147        		meanT1ObsNonCases				length = 8 label = "Test 1 Mean for Observed Non-Cases"
148        	    meanT2ObsNonCases         		length = 8 label = "Test 2 Mean for Observed
148      ! Non-Cases"
149        	    stdT1ObsNonCases          		length = 8 label = "Test 1 Standard Deviation for
149      ! Observed Non-Cases"
150        	    stdT2ObsNonCases				length = 8 label = "Test 2 Standard Deviation for Observed
150      ! Non-Cases"
151        	    corrObsNonCases					length = 8 label = "Correlation Between Observed Non-Cases"
152        
153        
154        		numberObsCasesQuadrant1			length = 8 label = "Number of Observed Cases in Quadrant 1"
155        		meanT1ObsCasesQuadrant1			length = 8 label = "Test 1 Mean for Observed Cases in
155      ! Quadrant 1"
156        	    meanT2ObsCasesQuadrant1     	length = 8 label = "Test 2 Mean for Observed Cases in
156      !  Quadrant 1"
157        	    stdT1ObsCasesQuadrant1      	length = 8 label = "Test 1 Standard Deviation for
157      ! Observed Cases in Quadrant 1"
158        	    stdT2ObsCasesQuadrant1	    	length = 8 label = "Test 2 Standard Deviation for
158      ! Observed Cases in Quadrant 1"
159        	    corrObsCasesQuadrant1	    	length = 8 label = "Correlation Between Observed Cases
159      ! in Quadrant 1"
160        		numberObsCasesQuadrant2			length = 8 label = "Number of Observed Cases in Quadrant 2"
161        		meanT1ObsCasesQuadrant2			length = 8 label = "Test 1 Mean for Observed Cases in
161      ! Quadrant 2"
162        	    meanT2ObsCasesQuadrant2     	length = 8 label = "Test 2 Mean for Observed Cases in
162      !  Quadrant 2"
163        	    stdT1ObsCasesQuadrant2      	length = 8 label = "Test 1 Standard Deviation for
163      ! Observed Cases in Quadrant 2"
164        	    stdT2ObsCasesQuadrant2	    	length = 8 label = "Test 2 Standard Deviation for
164      ! Observed Cases in Quadrant 2"
165        	    corrObsCasesQuadrant2	    	length = 8 label = "Correlation Between Observed Cases
165      ! in Quadrant 2"
166        		numberObsCasesQuadrant3			length = 8 label = "Number of Observed Cases in Quadrant 3"
4                                         The SAS System           13:43 Wednesday, April 24, 2013

167        		meanT1ObsCasesQuadrant3			length = 8 label = "Test 1 Mean for Observed Cases in
167      ! Quadrant 3"
168        	    meanT2ObsCasesQuadrant3     	length = 8 label = "Test 2 Mean for Observed Cases in
168      !  Quadrant 3"
169        	    stdT1ObsCasesQuadrant3      	length = 8 label = "Test 1 Standard Deviation for
169      ! Observed Cases in Quadrant 3"
170        	    stdT2ObsCasesQuadrant3	    	length = 8 label = "Test 2 Standard Deviation for
170      ! Observed Cases in Quadrant 3"
171        	    corrObsCasesQuadrant3	    	length = 8 label = "Correlation Between Observed Cases
171      ! in Quadrant 3"
172        		numberObsCasesQuadrant4			length = 8 label = "Number of Observed Cases in Quadrant 4"
173        		meanT1ObsCasesQuadrant4			length = 8	label = "Test 1 Mean for Observed Cases in
173      ! Quadrant 4"
174        	    meanT2ObsCasesQuadrant4     	length = 8 label = "Test 2 Mean for Observed Cases in
174      !  Quadrant 4"
175        	    stdT1ObsCasesQuadrant4      	length = 8 label = "Test 1 Standard Deviation for
175      ! Observed Cases in Quadrant 4"
176        	    stdT2ObsCasesQuadrant4	    	length = 8 label = "Test 2 Standard Deviation for
176      ! Observed Cases in Quadrant 4"
177        	    corrObsCasesQuadrant4	    	length = 8 label = "Correlation Between Observed Cases
177      ! in Quadrant 4"
178        		numberObsCasesQ123				length = 8 label = "Number of Observed Cases in Quadrants 1, 2,
178      !  and 3 Together"
179        		meanT1ObsCasesQ123				length = 8 label = "Test 1 Mean for Observed Cases in Quadrants
179      !  1, 2, and 3 Together"
180        	    meanT2ObsCasesQ123     			length = 8 label = "Test 2 Mean for Observed Cases in
180      ! Quadrants 1, 2, and 3 Together"
181        	    stdT1ObsCasesQ123      			length = 8 label = "Test 1 Standard Deviation for
181      ! Observed Cases in Quadrants 1, 2, and 3 Together"
182        	    stdT2ObsCasesQ123	    		length = 8 label = "Test 2 Standard Deviation for Observed
182      !  Cases in Quadrants 1, 2, and 3 Together"
183        	    corrObsCasesQ123	    		length = 8 label = "Correlation Between Observed Cases in
183      ! Quadrants 1, 2, and 3 Together"
184        		outcome1						length = 8 label = "Outcome of Nath Algorithm in Quadrant 1"
185        		outcome2						length = 8 label = "Outcome of Nath Algorithm in Quadrant 2"
186        		outcome3						length = 8 label = "Outcome of Nath Algorithm in Quadrant 3"
187        		outcome4						length = 8 label = "Outcome of Nath Algorithm in Quadrant 4"
188        		choice							length = 8 label = "Nath Estimates Chosen From This Quadrant"
189        		logL							length = 8 label = "Log Likelihood for Nath Estimates from Chosen
189      ! Quadrant"
190        	  	nathIterations					length = 8 label = "Number of Iterations of Nath Algorithm for
190      ! Chosen Quadrant"
191        		nathOutcome  					length = 8 label = "Nath Error Code for Chosen Quadrant"
192        		nathMu1							length = 8 label = "Nath Estimate for Mu1"
193        		nathMu2							length = 8 label = "Nath Estimate for Mu2"
194        		nathSig1						length = 8 label = "Nath Estimate for Sig1"
195        		nathSig2						length = 8 label = "Nath Estimate for Sig2"
196        		nathRho							length = 8 label = "Nath Estimate for Rho"
197        		probQ123Nath					length = 8 label = "Estimated Probability of Quadrants 1, 2, and 3
197      ! Based On Nath"
198        		probQuadrant4Nath				length = 8 label = "Estimated Probability of Quadrant 4 Based On
198      !  Nath"
199        		probQ123Weighted				length = 8 label = "Estimated Probability of Quadrants 1, 2, and
5                                         The SAS System           13:43 Wednesday, April 24, 2013

199      ! 3 Based On Weighted Estimates"
200        		probQuadrant4Weighted			length = 8 label = "Estimated Probability of Quadrant 4 Based
200      !  On Weighted Estimates"
201        		correctedNumberCases			length = 8 label = "Corrected Number of Cases Based On Nath"
202        		correctedNumberNonCases  		length = 8 label = "Corrected Number of Non-Cases Based On
202      !  Nath"
203        		weightedMu1						length = 8 label = "Weighted Estimate for Mu1"
204        		weightedMu2						length = 8 label = "Weighted Estimate for Mu2"
205        		weightedSig1					length = 8 label = "Weighted Estimate for Sig1"
206        		weightedSig2					length = 8 label = "Weighted Estimate for Sig2"
207        		weightedRho						length = 8 label = "Weighted Estimate for Rho"
208        		correctedMu1					length = 8 label = "Corrected Estimate for Mu1"
209        		correctedMu2					length = 8 label = "Corrected Estimate for Mu2"
210        		correctedSig1					length = 8 label = "Corrected Estimate for Sig1"
211        		correctedSig2					length = 8 label = "Corrected Estimate for Sig2"
212        		correctedRho					length = 8 label = "Corrected Estimate for Rho"
213        
214        
215        		
216        		observedAUCT1ParmA				length = 8 label = "Parameter A for Test 1 Binormal AUC
216      ! Calculated Using Observed Summary Stats"
217        		observedAUCT1ParmB				length = 8 label = "Parameter B for Test 1 Binormal AUC
217      ! Calculated Using Observed Summary Stats"
218        		observedAUCT1					length = 8 label = "Test 1 AUC Calculated From Observed Summary
218      ! Stats"
219        		observedAUCT2ParmA				length = 8 label = "Parameter A for Test 2 Binormal AUC
219      ! Calculated Using Observed Summary Stats"
220        		observedAUCT2ParmB				length = 8 label = "Parameter B for Test 2 Binormal AUC
220      ! Calculated Using Observed Summary Stats"
221        		observedAUCT2					length = 8 label = "Test 2 AUC Calculated From Observed Summary
221      ! Stats"
222        		observedDeltaAUC				length = 8 label = "Difference in AUC (Test 1 - Test 2)
222      ! Calculated From Observed Summary Stats"
223        		observedSEDeltaAUC				length = 8 label = "Standard Error of the Difference in AUC
223      ! Calculated From Observed Summary Stats"
224        		observedZDeltaAUC				length = 8 label = "Z Value for Delta AUC Hypothesis Test
224      ! Calculated From Observed Summary Stats"
225        		observedPDeltaAUC				length = 8 label = "P Value for Delta AUC Hypothesis Test
225      ! Calculated From Observed Summary Stats"
226        		observedReject					length = 8 label = "Indicator that Delta AUC Hypothesis Test
226      ! Calculated From Observed Summary Stats Rejected (1 = reject, 0 = fail to reject)"
227        
228        
229        		correctedAUCT1ParmA				length = 8 label = "Parameter A for Test 1 Binormal AUC
229      ! Calculated Using Corrected Summary Stats for Cases / Observed for Non-Cases"
230        		correctedAUCT1ParmB				length = 8 label = "Parameter B for Test 1 Binormal AUC
230      ! Calculated Using Corrected Summary Stats for Cases / Observed for Non-Cases"
231        		correctedAUCT1					length = 8 label = "Test 1 AUC Calculated From Corrected Summary
231      ! Stats for Cases / Observed for Non-Cases"
232        		correctedAUCT2ParmA				length = 8 label = "Parameter A for Test 2 Binormal AUC
232      ! Calculated Using Corrected Summary Stats for Cases / Observed for Non-Cases"
233        		correctedAUCT2ParmB				length = 8 label = "Parameter B for Test 2 Binormal AUC
233      ! Calculated Using Corrected Summary Stats for Cases / Observed for Non-Cases"
6                                         The SAS System           13:43 Wednesday, April 24, 2013

234        		correctedAUCT2					length = 8 label = "Test 2 AUC Calculated From Corrected Summary
234      ! Stats for Cases / Observed for Non-Cases"
235        		correctedDeltaAUC				length = 8 label = "Difference in AUC (Test 1 - Test 2)
235      ! Calculated From Corrected Summary Stats for Cases / Observed for Non-Cases"
236        		correctedSEDeltaAUC				length = 8 label = "Standard Error of the Difference in AUC
236      ! Calculated From Corrected Summary Stats for Cases / Observed for Non-Cases"
237        		correctedZDeltaAUC				length = 8 label = "Z Value for Delta AUC Hypothesis Test
237      ! Calculated From Corrected Summary Stats for Cases / Observed for Non-Cases"
238        		correctedPDeltaAUC				length = 8 label = "P Value for Delta AUC Hypothesis Test
238      ! Calculated From Corrected Summary Stats for Cases / Observed for Non-Cases"
239        		correctedReject					length = 8 label = "Indicator that Delta AUC Hypothesis Test
239      ! Calculated From Corrected Summary Stats for Cases / Observed for Non-Cases Rejected (1
239      ! = reject, 0 = fail to reject)"
240        
241        
242        		
243        		additionalColumnsNeeded			length = 8 label = "Number of empty columns added to the
243      ! row to make the matrix conform - if this number is anything but 0 DO NOT USE ROW"
244        		columnError						length = 8 label = "1 = program errored out and dummy columns were
244      ! created, 0 = no errors that required dummy columns"
245        		resumeError						length = 8 label = "1 = program errored out and resumed without
245      ! resolving error, 0 = no resume error"
246        		errorsThisRep					length = 8 label = "Number of errors ignored for the current
246      ! iteration"
247        		cumErrors						length = 8 label = "Cumulative number of errors ignored during
247      ! program";
248        
249        		rename  empty1 = emptyQuad1
250        			    empty2 = emptyQuad2
251        			    empty3 = emptyQuad3
252        			    empty4 = emptyQuad4
253        				outcome1 = outcomeNathQuad1
254        				outcome2 = outcomeNathQuad2
255        				outcome3 = outcomeNathQuad3
256        				outcome4 = outcomeNathQuad4 ;
257        
258        				set out01.results;
259        
260        			run;
261        
262        		if _n_= 1 then delete;
263        
264        	run;
265        
266        	proc iml worksize = 3000 symsize = 6000;	
267        
268        		/*define storage location for modules and load all modules*/
269        		reset storage = mlib.IMLModules;
270        		load _all_;
271        
272        		/*open dataset to edit*/
273        		edit out01.results;
274        
7                                         The SAS System           13:43 Wednesday, April 24, 2013

275        		/*free variables that do not change within the do loop*/
276        		/*note:  in order to make the program more flexible, we also free the experimental
276      ! variable but then reassign it later*/
277        		free errCode cumErrors pastErrors
278        			 maxIterations tolerance sampSize
279        			 tmuc1 tmuc2 tmun1 tmun2 tsigc1 tsigc2 tsign1 tsign2
280                     rateSignsSymptoms diseasePrevalence cutoffs populationRhoCases
280      ! populationRhoNonCases
281        			 populationAUCT1 populationAUCT2 populationDeltaAUC
282        			 quadrantContainingMLECases quadrantContainingMLENonCases
283        	         ncat vectorRow;
284        
285        		start main;
286        
287        			errCode = { "if cumErrors >= 0 then do;",
288        							"cumErrors = cumErrors + 1;",
289        							"call push( errCode ); resume;",
290        						"end;" };
291        
292        			cumErrors = 0;
293        			pastErrors = 0;
294        
295        			call push( errCode );
296        
297        			start biasCorrection;
298        				
299        				/*give values to constants*/
300        				/*we have to assign the macro variables as local variables because the IML
300      ! modules*/
301        				/*do not like to use macro variables as operands*/
302        				maxIterations = &maxIterations;
303        				tolerance = &tolerance;
304        				sampSize = &sampSize;
305        				tmuc1 = &tmuc1;
306        				tmuc2 = &tmuc2;
307        				tmun1 = &tmun1;
308        				tmun2 = &tmun2;
309        				tsigc1 = &tsigc1;
310        				tsigc2 = &tsigc2;
311        				tsign1 = &tsign1;
312        				tsign2 = &tsign2;
313        
314        				/*give values to experimental variables*/
315        				/*note: we will overwrite the experimental variable(s) with new values*/
316        				rateSignsSymptoms = &psi;
317        				diseasePrevalence = &p;
318        				cutoffs = &co1co2;
319        				populationRhoCases = &trhoc;
320        				populationRhoNonCases = &trhon;
321        
322        				/*calculate true AUCs and difference in AUCs*/
323        				populationAUCT1 = calculateAUC( errCode, cumErrors, tmuc1, tmun1, tsigc1, tsign1 );
324        				populationAUCT2 = calculateAUC( errcode, cumErrors, tmuc2, tmun2, tsigc2, tsign2 );
8                                         The SAS System           13:43 Wednesday, April 24, 2013

325        				populationDeltaAUC = populationAUCT1[ , 3 ] - populationAUCT2[ , 3 ];
326        
327        				/*find the quadrant containing the MLE for cases and non-cases*/
328        				if &tmuc1 >= cutoffs[ , 1 ] & &tmuc2 >= cutoffs[ , 2 ] then
328      ! quadrantContainingMLECases = 1;
329        					else if &tmuc1 >= cutoffs[ , 1 ] & &tmuc2 < cutoffs[ , 2 ] then
329      ! quadrantContainingMLECases = 2;
330        						else if &tmuc1 < cutoffs[ , 1 ] & &tmuc2 >= cutoffs[ , 2 ] then
330      ! quadrantContainingMLECases = 3;
331        							else quadrantContainingMLECases = 4;
332        
333        				if &tmun1 >= cutoffs[ , 1 ] & &tmun2 >= cutoffs[ , 2 ] then
333      ! quadrantContainingMLENonCases = 1;
334        					else if &tmun1 >= cutoffs[ , 1 ] & &tmun2 < cutoffs[ , 2 ] then
334      ! quadrantContainingMLENonCases = 2;
335        						else if &tmun1 < cutoffs[ , 1 ] & &tmun2 >= cutoffs[ , 2 ] then
335      ! quadrantContainingMLENonCases = 3;
336        							else quadrantContainingMLENonCases = 4;
337        
338        				/*create a vector of parameter values to loop through*/
339        				ncat = nrow( &vector );
340        
341        				/*loop through parameter values for the experimental variable*/
342        				do vectorRow = 1 to ncat by 1;
343        
344        					/*free rep of value used in last iteration of vectorRow do loop*/	
345        					/*free experimental variable of value assigned above*/	
346        					free rep &changer;
347        
348        					/*set current value for variable that changes*/
349        					&changer = &vector[ vectorRow, ];
350        
351        					/*set values for rep*/
352        					do rep = 1 to &nrep;
353        
354        						/*free variable names used in last iteration of rep do loop*/
355        						/*do not free variables assigned outside this do loop*/
356        						free / errCode cumErrors pastErrors
357        							   maxIterations tolerance sampSize
358        			                   tmuc1 tmuc2 tmun1 tmun2 tsigc1 tsigc2 tsign1 tsign2
359        							   rateSignsSymptoms diseasePrevalence cutoffs populationRhoCases
359      ! populationRhoNonCases
360        							   populationAUCT1 populationAUCT2 populationDeltaAUC quadrantContainingMLECases
360      !  quadrantContainingMLENonCases
361        							   ncat vectorRow rep &changer;
362        
363        						/*generate binormal data*/
364        						/*make a matrix with id disease t1score t2score and signs and symptoms in it*/
365        						/*set a seed for random number generator calls*/
366        						call randseed( &seed, 0 );
367        
368        						/*generates a random number of cases from a binomial distribution with n = sample
368      !  size and p = prevalence*/
9                                         The SAS System           13:43 Wednesday, April 24, 2013

369        						call randgen( numberCases, 'BINOM', diseasePrevalence, &sampSize );
370        
371        						numberNonCases = &sampSize - numberCases;
372        
373        						if numberCases < 2 | numberNonCases < 2 then do;
374        							
375        							trueError = 1;
376        							obsError = &errorCode;
377        							correctedNumberCasesError = &errorCode;
378        							empty123 = &errorCode;
379        							empty1 = &errorCode;
380        							empty2 = &errorCode;
381        							empty3 = &errorCode;
382        							empty4 = &errorCode;
383        							meanT1Cases = &errorCode;
384        							meanT2Cases = &errorCode;
385        							stdT1Cases = &errorCode;
386        							stdT2Cases = &errorCode;
387        							corrCases = &errorCode;
388        							meanT1NonCases = &errorCode;
389        							meanT2NonCases = &errorCode;
390        							stdT1NonCases = &errorCode;
391        							stdT2NonCases = &errorCode;
392        							corrNonCases = &errorCode;
393        							numberObsCases = &errorCode;
394        							meanT1ObsCases = &errorCode;
395        							meanT2ObsCases = &errorCode;
396        							stdT1ObsCases = &errorCode;
397        							stdT2ObsCases = &errorCode;
398        							corrObsCases = &errorCode;
399        							numberObsNonCases = &errorCode;
400        							meanT1ObsNonCases = &errorCode;
401        							meanT2ObsNonCases = &errorCode;
402        							stdT1ObsNonCases = &errorCode;
403        							stdT2ObsNonCases = &errorCode;
404        							corrObsNonCases = &errorCode;
405        							posT1SSGoldStd = &errorCode;	
406        							posT2SSGoldStd = &errorCode;	
407        							GoldStd = &errorCode;
408        							numberObsCasesQuadrant1 = &errorCode;
409        							meanT1ObsCasesQuadrant1 = &errorCode;
410        							meanT2ObsCasesQuadrant1 = &errorCode;
411        							stdT1ObsCasesQuadrant1 = &errorCode;
412        							stdT2ObsCasesQuadrant1 = &errorCode;
413        							corrObsCasesQuadrant1 = &errorCode;
414        							numberObsCasesQuadrant2 = &errorCode;
415        							meanT1ObsCasesQuadrant2 = &errorCode;
416        							meanT2ObsCasesQuadrant2 = &errorCode;
417        							stdT1ObsCasesQuadrant2 = &errorCode;
418        							stdT2ObsCasesQuadrant2 = &errorCode;
419        							corrObsCasesQuadrant2 = &errorCode;
420        							numberObsCasesQuadrant3 = &errorCode;
421        							meanT1ObsCasesQuadrant3 = &errorCode;
10                                        The SAS System           13:43 Wednesday, April 24, 2013

422        							meanT2ObsCasesQuadrant3 = &errorCode;
423        							stdT1ObsCasesQuadrant3 = &errorCode;
424        							stdT2ObsCasesQuadrant3 = &errorCode;
425        							corrObsCasesQuadrant3 = &errorCode;
426        							numberObsCasesQuadrant4 = &errorCode;
427        							meanT1ObsCasesQuadrant4 = &errorCode;
428        							meanT2ObsCasesQuadrant4 = &errorCode;
429        							stdT1ObsCasesQuadrant4 = &errorCode;
430        							stdT2ObsCasesQuadrant4 = &errorCode;
431        							corrObsCasesQuadrant4 = &errorCode;
432        							numberObsCasesQ123 = &errorCode;
433        							meanT1ObsCasesQ123 = &errorCode;
434        							meanT2ObsCasesQ123 = &errorCode;
435        							stdT1ObsCasesQ123 = &errorCode;
436        							stdT2ObsCasesQ123 = &errorCode;
437        							corrObsCasesQ123 = &errorCode;
438        							outcome1 = &errorCode;
439        							outcome2 = &errorCode;
440        							outcome3 = &errorCode;
441        							outcome4 = &errorCode;
442        							nathError = &errorCode;
443        							nathEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode ||
443      ! &errorCode || &errorCode || &errorCode || &errorCode || &errorCode ;
444        							bivariateNormalProbabilitiesNath = &errorCode || &errorCode ;
445        							bivNormProbsWeighted = &errorCode || &errorCode ;
446        							correctedNumberCasesNonCases = &errorCode || &errorCode ;
447        						    weightedEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode
447      ! || &errorCode ;
448        						    weighted = &errorCode;
449        				            correctedEstimatesRow = &errorCode || &errorCode || &errorCode ||
449      ! &errorCode || &errorCode ;	
450        							completeAUCT1 = &errorCode || &errorCode || &errorCode ;
451        							completeAUCT2 = &errorCode || &errorCode || &errorCode ;
452        							completeHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
452      ! &errorCode ;
453        							hypErrorComplete = &errorCode ;
454        							directionCompleteHypTest = &errorCode ;
455        							observedAUCT1 = &errorCode || &errorCode || &errorCode ;
456        							observedAUCT2 = &errorCode || &errorCode || &errorCode ;
457        							observedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
457      ! &errorCode ;
458        							bias = &errorCode;
459        							hypErrorObserved = &errorCode ;
460        							directionObservedHypTest = &errorCode ;
461        							correctedAUCT1 = &errorCode || &errorCode || &errorCode ;
462        							correctedAUCT2 = &errorCode || &errorCode || &errorCode ;
463        							correctedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
463      ! &errorCode ;
464        							uncorrectedBias = &errorCode;
465        							hypErrorCorrected = &errorCode ;
466        							directionCorrectedHypTest = &errorCode ;
467        						end; /*end not enough true cases*/
468        
11                                        The SAS System           13:43 Wednesday, April 24, 2013

469        						else do;
470        							trueError = 0;
471        
472        							/*matrix of participant ids*/
473        							id = ( 1:&sampSize )`;
474        
475        							/*create matrices of indicators for case or non-case*/
476        							/*create a matrix of 1 with length equal to the number of cases*/
477        							casesDisease = j( numberCases, 1, 1 );
478        
479        							/*create a matrix of 0's of length equal to the sample size - number of cases*/
480        							nonCasesDisease = j( numberNonCases, 1, 0 );
481        
482        							/*create disease index matrix*/
483        							disease = casesDisease // nonCasesDisease;
484        
485        							/*generate binormal test scores for cases and non-cases*/
486        							/*cases*/
487        							meanCases = { &tmuc1 &tmuc2 };
488        							rhoMatrixCases = { 1 &trhoc, &trhoc 1 };
489        							sigmaMatrixCases = { &tsigc1 &tsigc2 };
490        							covMatrixCases = rhoMatrixCases # ( sigmaMatrixCases` * sigmaMatrixCases );
491        							scoreMatrixCases = randnormal( numberCases, meanCases, covMatrixCases );
492        							t1scoreCases = scoreMatrixCases[ , 1 ];
493        							t2scoreCases = scoreMatrixCases[ , 2 ];
494        						
495        							/*non-cases*/
496        							meanNonCases = { &tmun1 &tmun2 };
497        							rhoMatrixNonCases = { 1 &trhon, &trhon 1 };
498        							sigmaMatrixNonCases = { &tsign1 &tsign2 };
499        							covMatrixNonCases = rhoMatrixNonCases # ( sigmaMatrixNonCases` *
499      ! sigmaMatrixNonCases );
500        							scoreMatrixNonCases = randnormal( numberNonCases, meanNonCases,
500      ! covMatrixNonCases );
501        							t1scoreNonCases = scoreMatrixNonCases[ , 1 ];
502        							t2scoreNonCases = scoreMatrixNonCases[ , 2 ];
503        
504        							/*combine score matrices*/	
505        							t1score = t1scoreCases // t1scoreNonCases;
506        							t2score = t2scoreCases // t2scoreNonCases;
507        
508        							/*assign signs and symptoms*/
509        							/*cases*/
510        							ssCases = j( numberCases, 1, &errorCode );
511        							call randgen( ssCases, 'BERN', rateSignsSymptoms );
512        
513        							/*non-cases*/
514        							ssNonCases = j( numberNonCases, 1, 0 );
515        
516        							/*combine signs and symptoms matrices*/
517        							ss = ssCases // ssNonCases;
518        
519        							/*make data matrix*/
12                                        The SAS System           13:43 Wednesday, April 24, 2013

520        							matrix = id || disease || ss || t1score || t2score;	
521        
522        							/*subset matrix into the groups*/
523        							/*we will then get summary statistics of the test scores in each of the groups*/
524        
525        							/*first, we must make sure there is more than 1 observed case and non-case*/
526        							/*if not, we will not calculate any summary statistics and we will return an
526      ! error*/
527        
528        							/*find the locations of each observation in each of the groups*/
529        							/*if any of the locations are empty, write an error*/
530        							/*Observed cases: disease = 1 and at least one test score is above the threshold
530      !  or ss = 1*/
531        							indicateObsCases = ( matrix[ , 2 ] = 1 &
532        				                               ( matrix[ , 3 ] = 1 |
533        				                                 matrix[ , 4 ] >= cutoffs[ , 1 ] |
534        				                                 matrix[ , 5 ] >= cutoffs[ , 2 ] ) );
535        
536        							/*Observed non-cases: disease = 0 or disease = 1 and ss = 0 and both test scores
536      !  are below their thresholds*/
537        							indicateObsNonCases = ( matrix[ , 2 ] = 0 |
538        					                              ( matrix[ , 2 ] = 1 &
539        					                                matrix[ , 3 ] = 0 &
540        					                                matrix[ , 4 ] < cutoffs[ , 1 ] &
541        					                                matrix[ , 5 ] < cutoffs[ , 2 ] ) );
542        
543        							/*calculate the number of observed cases*/
544        							numberObsCases = sum( indicateObsCases );
545        							numberObsNonCases = sum( indicateObsNonCases );
546        
547        							/*if there are less than 2 observed cases or non-cases, do not calculate any
547      ! summary statistics and return an error*/
548        							if ( numberObsCases < 2 | numberObsNonCases < 2 ) then do;
549        								
550        								obsError = 1;
551        								correctedNumberCasesError = &errorCode;
552        								empty123 = &errorCode;
553        								empty1 = &errorCode;
554        								empty2 = &errorCode;
555        								empty3 = &errorCode;
556        								empty4 = &errorCode;
557        								meanT1Cases = &errorCode;
558        								meanT2Cases = &errorCode;
559        								stdT1Cases = &errorCode;
560        								stdT2Cases = &errorCode;
561        								corrCases = &errorCode;
562        								meanT1NonCases = &errorCode;
563        								meanT2NonCases = &errorCode;
564        								stdT1NonCases = &errorCode;
565        								stdT2NonCases = &errorCode;
566        								corrNonCases = &errorCode;
567        								meanT1ObsCases = &errorCode;
568        								meanT2ObsCases = &errorCode;
13                                        The SAS System           13:43 Wednesday, April 24, 2013

569        								stdT1ObsCases = &errorCode;
570        								stdT2ObsCases = &errorCode;
571        								corrObsCases = &errorCode;
572        								meanT1ObsNonCases = &errorCode;
573        								meanT2ObsNonCases = &errorCode;
574        								stdT1ObsNonCases = &errorCode;
575        								stdT2ObsNonCases = &errorCode;
576        								corrObsNonCases = &errorCode;
577        								posT1SSGoldStd = &errorCode;	
578        								posT2SSGoldStd = &errorCode;	
579        								GoldStd = &errorCode;
580        								numberObsCasesQuadrant1 = &errorCode;
581        								meanT1ObsCasesQuadrant1 = &errorCode;
582        								meanT2ObsCasesQuadrant1 = &errorCode;
583        								stdT1ObsCasesQuadrant1 = &errorCode;
584        								stdT2ObsCasesQuadrant1 = &errorCode;
585        								corrObsCasesQuadrant1 = &errorCode;
586        								numberObsCasesQuadrant2 = &errorCode;
587        								meanT1ObsCasesQuadrant2 = &errorCode;
588        								meanT2ObsCasesQuadrant2 = &errorCode;
589        								stdT1ObsCasesQuadrant2 = &errorCode;
590        								stdT2ObsCasesQuadrant2 = &errorCode;
591        								corrObsCasesQuadrant2 = &errorCode;
592        								numberObsCasesQuadrant3 = &errorCode;
593        								meanT1ObsCasesQuadrant3 = &errorCode;
594        								meanT2ObsCasesQuadrant3 = &errorCode;
595        								stdT1ObsCasesQuadrant3 = &errorCode;
596        								stdT2ObsCasesQuadrant3 = &errorCode;
597        								corrObsCasesQuadrant3 = &errorCode;
598        								numberObsCasesQuadrant4 = &errorCode;
599        								meanT1ObsCasesQuadrant4 = &errorCode;
600        								meanT2ObsCasesQuadrant4 = &errorCode;
601        								stdT1ObsCasesQuadrant4 = &errorCode;
602        								stdT2ObsCasesQuadrant4 = &errorCode;
603        								corrObsCasesQuadrant4 = &errorCode;
604        								numberObsCasesQ123 = &errorCode;
605        								meanT1ObsCasesQ123 = &errorCode;
606        								meanT2ObsCasesQ123 = &errorCode;
607        								stdT1ObsCasesQ123 = &errorCode;
608        								stdT2ObsCasesQ123 = &errorCode;
609        								corrObsCasesQ123 = &errorCode;
610        								outcome1 = &errorCode;
611        								outcome2 = &errorCode;
612        								outcome3 = &errorCode;
613        								outcome4 = &errorCode;
614        								nathError = &errorCode;
615        								nathEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode ||
615      ! &errorCode || &errorCode || &errorCode || &errorCode|| &errorCode ;
616        								bivariateNormalProbabilitiesNath = &errorCode || &errorCode ;
617        								bivNormProbsWeighted = &errorCode || &errorCode ;
618        								correctedNumberCasesNonCases = &errorCode || &errorCode ;
619        							    weightedEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode
619      ! || &errorCode ;
14                                        The SAS System           13:43 Wednesday, April 24, 2013

620        							    weighted = &errorCode;
621        					            correctedEstimatesRow = &errorCode || &errorCode || &errorCode ||
621      ! &errorCode || &errorCode ;	
622        								completeAUCT1 = &errorCode || &errorCode || &errorCode ;
623        								completeAUCT2 = &errorCode || &errorCode || &errorCode ;
624        								completeHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
624      ! &errorCode ;
625        								hypErrorComplete = &errorCode ;
626        								directionCompleteHypTest = &errorCode ;
627        								observedAUCT1 = &errorCode || &errorCode || &errorCode ;
628        								observedAUCT2 = &errorCode || &errorCode || &errorCode ;
629        								observedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
629      ! &errorCode ;
630        								bias = &errorcode;
631        								hypErrorObserved = &errorCode ;
632        								directionObservedHypTest = &errorCode ;
633        								correctedAUCT1 = &errorCode || &errorCode || &errorCode ;
634        								correctedAUCT2 = &errorCode || &errorCode || &errorCode ;
635        								correctedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
635      ! &errorCode ;
636        								uncorrectedBias = &errorCode;
637        								hypErrorCorrected = &errorCode ;
638        								directionCorrectedHypTest = &errorCode ;
639        							end; /*end not enough observed cases*/
640        
641        							else do;
642        
643        								obsError = 0;
644        
645        								/*subset the true cases and non-cases*/
646        								cases = matrix[ ( loc( matrix[ , 2 ] = 1 ) )`, ];
647        								nonCases = matrix[ ( loc( matrix[ , 2 ] = 0 ) )`, ];
648        
649        								/*find mean, std, corr of true cases*/
650        								meanT1Cases = mean( cases[ , 4 ] );
651        
652        								meanT2Cases = mean( cases[ , 5 ] );
653        								sampleCovMatrixCases = cov( cases[ , 4 ] || cases[ , 5 ] );
654        
655        								stdT1Cases = sqrt( sampleCovMatrixCases[ 1, 1 ] );
656        								stdT2Cases = sqrt( sampleCovMatrixCases[ 2, 2 ] );
657        
658        								/*use only element 12 of the 2 x 2 covariance matrix*/
659        								corrCases = sampleCovMatrixCases[ 1, 2 ] / stdT1Cases / stdT2Cases;
660        								
661        
662        								/*find mean, std, corr of true non-cases*/
663        								meanT1NonCases = mean( nonCases[ , 4 ] );
664        								meanT2NonCases = mean( nonCases[ , 5 ] );
665        								sampleCovMatrixNonCases = cov( nonCases[ , 4 ] || nonCases[ , 5 ] );
666        
667        								stdT1NonCases = sqrt( sampleCovMatrixNonCases[ 1, 1 ] );
668        								stdT2NonCases = sqrt( sampleCovMatrixNonCases[ 2, 2 ] );
15                                        The SAS System           13:43 Wednesday, April 24, 2013

669        
670        								/*use only element 12 of the 2 x 2 covariance matrix*/
671        								corrNonCases = sampleCovMatrixNonCases[ 1, 2 ] / stdT1NonCases / stdT2NonCases;
672        
673        								/*calculate AUC with complete disease status ascertainment*/
674        								completeAUCT1 = calculateAUC( errcode, cumErrors, meanT1Cases, meanT1NonCases,
674      ! stdT1Cases, stdT1NonCases );
675        								completeAUCT2 = calculateAUC( errcode, cumErrors, meanT2Cases, meanT2NonCases,
675      ! stdT2Cases, stdT2NonCases );
676        								completeHypTest = differenceInAUCHypothesisTest( errcode, cumErrors,
676      ! completeAUCT1[ , 1 ],
677        				 																 completeAUCT1[ , 2 ],
678        				 																 completeAUCT1[ , 3 ],
679        																				 completeAUCT2[ , 1 ],
680        																				 completeAUCT2[ , 2 ],
681        				 																 completeAUCT2[ , 3 ],
682        																				 corrCases,
683        																				 corrNonCases,
684        				                                                                 numberCases,
685        																				 numberNonCases );
686        
687        								/*check direction of rejection against population difference in AUC*/	
688        								if completeHypTest[ , 5 ] = 1 then do;
689        
690        									/*if the population difference is 0 but the comp/obs/corr rejects then mark
690      ! the direction of rejection as a 1*/
691        									/*also return an error so this kind of rejection can be separated from other
691      ! kinds*/
692        									if populationDeltaAUC = 0 then do;
693        										hypErrorComplete = 1;
694        										directionCompleteHypTest = 1;
695        									end;
696        
697        									/*if the population difference has the same sign as the comp/obs/corr
697      ! difference then the tests are in the same order*/
698        									/*this is a rejection in the correct direction*/
699        									else if ( populationDeltaAUC < 0 & completeHypTest[ , 1 ] < 0 ) |
700        					                        ( populationDeltaAUC > 0 & completeHypTest[ , 1 ] > 0 )
700      ! then do;
701        										hypErrorComplete = 0;
702        										directionCompleteHypTest = 1;
703        									end;
704        
705        									/*if the population difference has the opposite sign as the comp/obs/corr
705      ! difference then the tests are in the wrong order*/
706        									/*this is a rejection in the wrong or reverse direction*/
707        									else if ( populationDeltaAUC < 0 & completeHypTest[ , 1 ] > 0 ) |
708        								            ( populationDeltaAUC > 0 & completeHypTest[ , 1 ] < 0 ) then do;
709        										hypErrorComplete = 0;
710        										directionCompleteHypTest = -1;
711        									end;
712        
713        								end; /*end complete hyp test rejected*/
16                                        The SAS System           13:43 Wednesday, April 24, 2013

714        
715        								/*if the comp/obs/corr hyp test did not reject then set the direction of
715      ! rejection to 0*/
716        								else do;
717        									hypErrorComplete = 0;
718        									directionCompleteHypTest = 0;
719        								end; /*end complete hyp test failed to reject*/					
720        
721        								/*now do the observed cases and non-cases*/
722        								obsCases = matrix[ loc( indicateObsCases )`, ];
723        								obsNonCases = matrix[ loc( indicateObsNonCases )`, ];
724        
725        								/*find mean, std, corr*/
726        								/*cases*/
727        								meanT1ObsCases = mean( obsCases[ , 4 ] );
728        								meanT2ObsCases = mean( obsCases[ , 5 ] );
729        								covMatrixObsCases = cov( obsCases[ , 4 ] || obsCases[ , 5 ] );
730        
731        								stdT1ObsCases = sqrt( covMatrixObsCases[ 1, 1 ] );
732        								stdT2ObsCases = sqrt( covMatrixObsCases[ 2, 2 ] );
733        
734        								/*use only element 12 of the 2 x 2 covariance matrix*/
735        								corrObsCases = covMatrixObsCases[ 1, 2 ] / stdT1ObsCases / stdT2ObsCases;
736        
737        								/*non-cases*/
738        								meanT1ObsNonCases = mean( obsNonCases[ , 4 ] );
739        								meanT2ObsNonCases = mean( obsNonCases[ , 5 ] );
740        								covMatrixObsNonCases = cov( obsNonCases[ , 4 ] || obsNonCases[ , 5 ] );
741        
742        								stdT1ObsNonCases = sqrt( covMatrixObsNonCases[ 1, 1 ] );
743        								stdT2ObsNonCases = sqrt( covMatrixObsNonCases[ 2, 2 ] );
744        
745        								/*use only element 12 of the 2 x 2 covariance matrix*/
746        								corrObsNonCases = covMatrixObsNonCases[ 1, 2 ] / stdT1ObsNonCases /
746      ! stdT2ObsNonCases;
747        
748        								/*calculate observed AUC*/
749        								observedAUCT1 = calculateAUC( errcode, cumErrors, meanT1ObsCases,
749      ! meanT1ObsNonCases, stdT1ObsCases, stdT1ObsNonCases );
750        								observedAUCT2 = calculateAUC( errcode, cumErrors, meanT2ObsCases,
750      ! meanT2ObsNonCases, stdT2ObsCases, stdT2ObsNonCases );
751        
752        								observedHypTest = differenceInAUCHypothesisTest( errcode, cumErrors,
752      ! observedAUCT1[ , 1 ],
753        				 																 observedAUCT1[ , 2 ],
754        				 																 observedAUCT1[ , 3 ],
755        																				 observedAUCT2[ , 1 ],
756        																				 observedAUCT2[ , 2 ],
757        				 																 observedAUCT2[ , 3 ],
758        																				 corrObsCases,
759        																				 corrObsNonCases,
760        				                                                                 numberObsCases,
761        																				 numberObsNonCases );
17                                        The SAS System           13:43 Wednesday, April 24, 2013

762        
763        								/*calculate bias in difference in AUC*/
764        								if observedHypTest[ , 1 ] ^= &errorCode then bias = observedHypTest[ , 1 ] -
764      ! completeHypTest[ , 1 ];
765        									else bias = &errorCode;
766        
767        								/*check direction of rejection against population difference in AUC*/	
768        								if observedHypTest[ , 5 ] = 1 then do;
769        
770        									/*if the population difference is 0 but the comp/obs/corr rejects then mark
770      ! the direction of rejection as a 1*/
771        									/*also return an error so this kind of rejection can be separated from other
771      ! kinds*/
772        									if populationDeltaAUC = 0 then do;
773        										hypErrorObserved = 1;
774        										directionObservedHypTest = 1;
775        									end;
776        
777        									/*if the population difference has the same sign as the comp/obs/corr
777      ! difference then the tests are in the same order*/
778        									/*this is a rejection in the correct direction*/
779        									else if ( populationDeltaAUC < 0 & observedHypTest[ , 1 ] < 0 ) |
780        					                        ( populationDeltaAUC > 0 & observedHypTest[ , 1 ] > 0 )
780      ! then do;
781        										hypErrorObserved = 0;
782        										directionObservedHypTest = 1;
783        									end;
784        
785        									/*if the population difference has the opposite sign as the comp/obs/corr
785      ! difference then the tests are in the wrong order*/
786        									/*this is a rejection in the wrong or reverse direction*/
787        									else if ( populationDeltaAUC < 0 & observedHypTest[ , 1 ] > 0 ) |
788        								            ( populationDeltaAUC > 0 & observedHypTest[ , 1 ] < 0 ) then do;
789        										hypErrorObserved = 0;
790        										directionObservedHypTest = -1;
791        									end;
792        
793        								end; /*end obs hyp test rejected*/
794        
795        								/*if the comp/obs/corr hyp test did not reject then set the direction of
795      ! rejection to 0*/
796        								else do;
797        									hypErrorObserved = 0;
798        									directionObservedHypTest = 0;
799        								end; /*end obs hyp test failed to reject*/
800        
801        								/*calculate recall rate for cases for each test*/
802        								/*proportion of cases who test positive and are recalled for biopsy*/
803        								/*number of t1screen pos / number of participants given t1*/
804        								/*id, disease, ss, t1score, t2score*/
805        								numberT1ScreenPosSSCases = sum( ( matrix[ , 2 ] = 1 &
806        			                                                    ( matrix[ , 4 ] >= cutoffs[ , 1
806      ! ] |
18                                        The SAS System           13:43 Wednesday, April 24, 2013

807        			                                                    ( matrix[ , 4 ] < cutoffs[ , 1 ]
807      !  &
808        			                                                      matrix[ , 5 ] < cutoffs[ , 2 ]
808      !  &
809        			                                                      matrix[ , 3 ] = 1 ) ) )` );
810        
811        								numberT2ScreenPosSSCases = sum( ( matrix[ , 2 ] = 1 &
812        			                                                    ( matrix[ , 5 ] >= cutoffs[ , 2
812      ! ] |
813        			                                                    ( matrix[ , 4 ] < cutoffs[ , 1 ]
813      !  &
814        			                                                      matrix[ , 5 ] < cutoffs[ , 2 ]
814      !  &
815        			                                                      matrix[ , 3 ] = 1 ) ) )` );
816        
817        						        numberGoldStandardCases = sum( ( matrix[ , 2 ] = 1 &
818        								                               ( matrix[ , 4 ] >= cutoffs[ , 1 ] |
819        													             matrix[ , 5 ] >= cutoffs[ , 2 ] |
820        			                                                     matrix[ , 3 ] = 1 ) )` );
821        
822        								posT1SSGoldStd = numberT1ScreenPosSSCases / numberCases;
823        								posT2SSGoldStd = numberT2ScreenPosSSCases / numberCases;
824        								GoldStd = numberGoldStandardCases / numberCases;
825        
826        								/*Observed cases in quadrant 1: disease = 1 and both test scores are above
826      ! their thresholds*/
827        							    indicateObsCasesQuadrant1 = ( matrix[ , 2 ] = 1 &
828        					                                          matrix[ , 4 ] >= cutoffs[ , 1 ] &
829        					                                          matrix[ , 5 ] >= cutoffs[ , 2 ] )`;				
830        
831        								/*Observed cases in quadrant 2: disease = 1, test 1 score above threshold, test
831      !  2 score below threshold*/
832        							    indicateObsCasesQuadrant2 = ( matrix[ , 2 ] = 1 &
833        					                                          matrix[ , 4 ] >= cutoffs[ , 1 ] &
834        					                                          matrix[ , 5 ] < cutoffs[ , 2 ] )`;
835        
836        								/*Observed cases in quadrant 3: disease = 1, test 1 score below threshold, test
836      !  2 score above threshold*/
837        							    indicateObsCasesQuadrant3 = ( matrix[ , 2 ] = 1 &
838        					                                          matrix[ , 4 ] < cutoffs[ , 1 ] &
839        					                                          matrix[ , 5 ] >= cutoffs[ , 2 ] )`;
840        
841        								/*Observed cases in quadrant 4: disease = 1, test 1 score below threshold, test
841      !  2 score below threshold, ss = 1*/
842        							    indicateObsCasesQuadrant4 = ( matrix[ , 2 ] = 1 &
843        						                                      matrix[ , 4 ] < cutoffs[ , 1 ] &
844        						                                      matrix[ , 5 ] < cutoffs[ , 2 ] &
845        						                                      matrix[ , 3 ] = 1 )`;
846        
847        								/*calculate the number of observed cases in each quadrant and in the first
847      ! three quadrants together*/
848        								numberObsCasesQuadrant1 = sum( indicateObsCasesQuadrant1 );
849        								numberObsCasesQuadrant2 = sum( indicateObsCasesQuadrant2 );
19                                        The SAS System           13:43 Wednesday, April 24, 2013

850        								numberObsCasesQuadrant3 = sum( indicateObsCasesQuadrant3 );
851        								numberObsCasesQ123 = numberObsCasesQuadrant1 +
852        								                     numberObsCasesQuadrant2 +
853        											         numberObsCasesQuadrant3;
854        								numberObsCasesQuadrant4 = numberObsCases - numberObsCasesQ123;
855        
856        								/*if there are < 2 observed cases quadrants 1, 2, and 3 together*/
857        								/*then return an error and do not calculate summary statistics for quadrants 1,
857      !  2, and 3*/	
858        								if numberObsCasesQ123 < 2 then do;
859        									
860        									empty123 = 1;
861        									empty1 = 1;
862        									empty2 = 1;
863        									empty3 = 1;
864        									meanT1ObsCasesQuadrant1 = &errorCode;
865        									meanT2ObsCasesQuadrant1 = &errorCode;
866        									stdT1ObsCasesQuadrant1 = &errorCode;
867        									stdT2ObsCasesQuadrant1 = &errorCode;
868        									corrObsCasesQuadrant1 = &errorCode;
869        									outcome1 = &errorCode;
870        									nathQ1Row = &errorCode || &errorCode || &errorCode || &errorCode || &errorCode
870      !  || &errorCode || &errorCode ;
871        									logLQ1 = &errorCode;
872        									meanT1ObsCasesQuadrant2 = &errorCode;
873        									meanT2ObsCasesQuadrant2 = &errorCode;
874        									stdT1ObsCasesQuadrant2 = &errorCode;
875        									stdT2ObsCasesQuadrant2 = &errorCode;
876        									corrObsCasesQuadrant2 = &errorCode;
877        									outcome2 = &errorCode;
878        									nathQ2Row = &errorCode || &errorCode || &errorCode || &errorCode || &errorCode
878      !  || &errorCode || &errorCode ;
879        									logLQ2 = &errorCode;
880        									meanT1ObsCasesQuadrant3 = &errorCode;
881        									meanT2ObsCasesQuadrant3 = &errorCode;
882        									stdT1ObsCasesQuadrant3 = &errorCode;
883        									stdT2ObsCasesQuadrant3 = &errorCode;
884        									corrObsCasesQuadrant3 = &errorCode;
885        									outcome3 = &errorCode;
886        									nathQ3Row = &errorCode || &errorCode || &errorCode || &errorCode || &errorCode
886      !  || &errorCode || &errorCode ;
887        									logLQ3 = &errorCode;
888        									meanT1ObsCasesQ123 = &errorCode;
889        									meanT2ObsCasesQ123 = &errorCode;
890        									stdT1ObsCasesQ123 = &errorCode;
891        									stdT2ObsCasesQ123 = &errorCode;
892        									corrObsCasesQ123 = &errorCode;
893        
894        									/*Since Q123 is empty, then all observations must be in Q4*/
895        									/*Calculate summary stats for Q4 only*/
896        									empty4 = 0;
897        
898        									obsCasesQuadrant4 = matrix[ loc( indicateObsCasesQuadrant4 )`, ];
20                                        The SAS System           13:43 Wednesday, April 24, 2013

899        
900        									/*find mean, std, corr*/
901        									meanT1ObsCasesQuadrant4 = mean( obsCasesQuadrant4[ , 4 ] );
902        									meanT2ObsCasesQuadrant4 = mean( obsCasesQuadrant4[ , 5 ] );
903        									covMatrixObsCasesQuadrant4 = cov( obsCasesQuadrant4[ , 4 ] ||
903      ! obsCasesQuadrant4[ , 5 ] );
904        
905        									stdT1ObsCasesQuadrant4 = sqrt( covMatrixObsCasesQuadrant4[ 1, 1 ] );
906        									stdT2ObsCasesQuadrant4 = sqrt( covMatrixObsCasesQuadrant4[ 2, 2 ] );
907        
908        									/*use only element 12 of the 2 x 2 covariance matrix*/
909        									corrObsCasesQuadrant4 = covMatrixObsCasesQuadrant4[ 1, 2 ] /
909      ! stdT1ObsCasesQuadrant4 / stdT2ObsCasesQuadrant4;		
910        
911        									/*run nath algorithm*/
912        									nathQ4Row = nathAlgorithm( errcode, cumErrors, &tolerance, &maxIterations,
912      ! &errorCode, 4, cutoffs[ , 1 ], cutoffs[ , 2 ],
913        						                                       meanT1ObsCasesQuadrant4,
913      ! meanT2ObsCasesQuadrant4,
914        						                                       stdT1ObsCasesQuadrant4,
914      ! stdT2ObsCasesQuadrant4,
915        						                                       corrObsCasesQuadrant4 );
916        
917        									/*outcome of nath algorithm*/
918        									outcome4 = nathQ4Row[ , 2 ];
919        
920        									/*maximize the log likelihood if the algorithm converged*/
921        									if outcome4 = 0 then logLQ4 = maximizeLogLikelihood( errcode, cumErrors,
921      ! numberObsCases, nathQ4Row[ , 3 ], nathQ4Row[ , 4 ],
922        						                                           		                 nathQ4Row[ , 5 ],
922      ! nathQ4Row[ , 6 ], nathQ4Row[ , 7 ],
923        						                                            	                 meanT1ObsCases,
923      ! meanT2ObsCases,
924        						                                            	                 stdT1ObsCases,
924      ! stdT2ObsCases,
925        						                                            	                 corrObsCases );
926        
927        									else logLQ4 = &errorCode;
928        				
929        								end; /*end q123 is empty*/
930        
931        								else do;
932        									empty123 = 0;
933        
934        									/*Observed cases in area 1: disease = 1 and at least one test score is above
934      ! its threshold*/
935        							   		indicateObsCasesQ123 = ( indicateObsCasesQuadrant1 |
936        				                                             indicateObsCasesQuadrant2 |
937        				                                             indicateObsCasesQuadrant3 );
938        
939        									obsCasesQ123 = matrix[ loc( indicateObsCasesQ123 )`, ];
940        
941        									/*find mean, std, corr*/
21                                        The SAS System           13:43 Wednesday, April 24, 2013

942        									meanT1ObsCasesQ123 = mean( obsCasesQ123[ , 4 ] );
943        									meanT2ObsCasesQ123 = mean( obsCasesQ123[ , 5 ] );
944        									covMatrixObsCasesQ123 = cov( obsCasesQ123[ , 4 ] || obsCasesQ123[ , 5 ] );
945        
946        									stdT1ObsCasesQ123 = sqrt( covMatrixObsCasesQ123[ 1, 1 ] );
947        									stdT2ObsCasesQ123 = sqrt( covMatrixObsCasesQ123[ 2, 2 ] );
948        
949        									/*use only element 12 of the 2 x 2 covariance matrix*/
950        									corrObsCasesQ123 = covMatrixObsCasesQ123[ 1, 2 ] / stdT1ObsCasesQ123 /
950      ! stdT2ObsCasesQ123;
951        
952        									/*if the quadrant has < 2 obs cases then do not calculate summary statistics*/
953        									/*otherwise calculate summary statistics*/
954        									if numberObsCasesQuadrant1 < 2 then do;
955        										
956        										empty1 = 1;
957        										meanT1ObsCasesQuadrant1 = &errorCode;
958        										meanT2ObsCasesQuadrant1 = &errorCode;
959        										stdT1ObsCasesQuadrant1 = &errorCode;
960        										stdT2ObsCasesQuadrant1 = &errorCode;
961        										corrObsCasesQuadrant1 = &errorCode;
962        										outcome1 = &errorCode;
963        										nathQ1Row = &errorCode || &errorCode || &errorCode || &errorCode ||
963      ! &errorCode || &errorCode || &errorCode ;
964        										logLQ1 = &errorCode;
965        									end; /*end quadrant 1 is empty*/
966        
967        									else do;
968        										empty1 = 0;
969        										obsCasesQuadrant1 = matrix[ loc( indicateObsCasesQuadrant1 )`, ];
970        
971        										/*find mean, std, corr*/
972        										meanT1ObsCasesQuadrant1 = mean( obsCasesQuadrant1[ , 4 ] );
973        										meanT2ObsCasesQuadrant1 = mean( obsCasesQuadrant1[ , 5 ] );
974        										covMatrixObsCasesQuadrant1 = cov( obsCasesQuadrant1[ , 4 ] ||
974      ! obsCasesQuadrant1[ , 5 ] );
975        
976        										stdT1ObsCasesQuadrant1 = sqrt( covMatrixObsCasesQuadrant1[ 1, 1 ] );
977        										stdT2ObsCasesQuadrant1 = sqrt( covMatrixObsCasesQuadrant1[ 2, 2 ] );
978        
979        										/*use only element 12 of the 2 x 2 covariance matrix*/
980        										corrObsCasesQuadrant1 = covMatrixObsCasesQuadrant1[ 1, 2 ] /
980      ! stdT1ObsCasesQuadrant1 / stdT2ObsCasesQuadrant1;
981        
982        										/*run nath algorithm*/
983        										nathQ1Row = nathAlgorithm( errcode, cumErrors, &tolerance, &maxIterations,
983      ! &errorCode, 1, cutoffs[ , 1 ], cutoffs[ , 2 ],
984        							                                       meanT1ObsCasesQuadrant1,
984      ! meanT2ObsCasesQuadrant1,
985        							                                       stdT1ObsCasesQuadrant1,
985      ! stdT2ObsCasesQuadrant1,
986        							                                       corrObsCasesQuadrant1 );
987        
22                                        The SAS System           13:43 Wednesday, April 24, 2013

988        										/*outcome of nath algorithm*/
989        										outcome1 = nathQ1Row[ , 2 ];
990        
991        										/*maximize the log likelihood if the algorithm converged*/
992        										if outcome1 = 0 then logLQ1 = maximizeLogLikelihood( errcode, cumErrors,
992      ! numberObsCases, nathQ1Row[ , 3 ], nathQ1Row[ , 4 ],
993        							                                           		                 nathQ1Row[ , 5 ],
993      ! nathQ1Row[ , 6 ], nathQ1Row[ , 7 ],
994        							                                            	                 meanT1ObsCases,
994      ! meanT2ObsCases,
995        							                                            	                 stdT1ObsCases,
995      ! stdT2ObsCases,
996        							                                            	                 corrObsCases );
997        
998        										else logLQ1 = &errorCode;
999        
1000       									end; /*end quadrant 1 is not empty*/
1001       
1002       									if numberObsCasesQuadrant2 < 2 then do;
1003       										
1004       										empty2 = 1;
1005       										meanT1ObsCasesQuadrant2 = &errorCode ;
1006       										meanT2ObsCasesQuadrant2 = &errorCode ;
1007       										stdT1ObsCasesQuadrant2 = &errorCode ;
1008       										stdT2ObsCasesQuadrant2 = &errorCode ;
1009       										corrObsCasesQuadrant2 = &errorCode ;
1010       										outcome2 = &errorCode;
1011       										nathQ2Row = &errorCode || &errorCode || &errorCode || &errorCode ||
1011     ! &errorCode || &errorCode || &errorCode ;
1012       										logLQ2 = &errorCode;
1013       
1014       									end; /*end quadrant 2 is empty*/
1015       
1016       									else do;
1017       										empty2 = 0;
1018       										obsCasesQuadrant2 = matrix[ loc( indicateObsCasesQuadrant2 )`, ];
1019       
1020       										/*find mean, std, corr*/
1021       										meanT1ObsCasesQuadrant2 = mean( obsCasesQuadrant2[ , 4 ] );
1022       										meanT2ObsCasesQuadrant2 = mean( obsCasesQuadrant2[ , 5 ] );
1023       										covMatrixObsCasesQuadrant2 = cov( obsCasesQuadrant2[ , 4 ] ||
1023     ! obsCasesQuadrant2[ , 5 ] );
1024       
1025       										stdT1ObsCasesQuadrant2 = sqrt( covMatrixObsCasesQuadrant2[ 1, 1 ] );
1026       										stdT2ObsCasesQuadrant2 = sqrt( covMatrixObsCasesQuadrant2[ 2, 2 ] );
1027       
1028       										/*use only element 12 of the 2 x 2 covariance matrix*/
1029       										corrObsCasesQuadrant2 = covMatrixObsCasesQuadrant2[ 1, 2 ] /
1029     ! stdT1ObsCasesQuadrant2 / stdT2ObsCasesQuadrant2;
1030       
1031       										/*run nath algorithm*/
1032       										nathQ2Row = nathAlgorithm( errcode, cumErrors, &tolerance, &maxIterations,
1032     ! &errorCode, 2, cutoffs[ , 1 ], cutoffs[ , 2 ],
23                                        The SAS System           13:43 Wednesday, April 24, 2013

1033       							                                       meanT1ObsCasesQuadrant2,
1033     ! meanT2ObsCasesQuadrant2,
1034       							                                       stdT1ObsCasesQuadrant2,
1034     ! stdT2ObsCasesQuadrant2,
1035       							                                       corrObsCasesQuadrant2 );
1036       
1037       										/*outcome of nath algorithm*/
1038       										outcome2 = nathQ2Row[ , 2 ];
1039       
1040       										/*maximize the log likelihood if the algorithm converged*/
1041       										if outcome2 = 0 then logLQ2 = maximizeLogLikelihood( errcode, cumErrors,
1041     ! numberObsCases, nathQ2Row[ , 3 ], nathQ2Row[ , 4 ],
1042       							                                           		                 nathQ2Row[ , 5 ],
1042     ! nathQ2Row[ , 6 ], nathQ2Row[ , 7 ],
1043       							                                            	                 meanT1ObsCases,
1043     ! meanT2ObsCases,
1044       							                                            	                 stdT1ObsCases,
1044     ! stdT2ObsCases,
1045       							                                            	                 corrObsCases );
1046       
1047       										else logLQ2 = &errorCode;
1048       
1049       									end; /*end quadrant 2 is not empty*/
1050       
1051       									if numberObsCasesQuadrant3 < 2 then do;
1052       										
1053       										empty3 = 1;
1054       										meanT1ObsCasesQuadrant3 = &errorCode;
1055       										meanT2ObsCasesQuadrant3 = &errorCode;
1056       										stdT1ObsCasesQuadrant3 = &errorCode;
1057       										stdT2ObsCasesQuadrant3 = &errorCode;
1058       										corrObsCasesQuadrant3 = &errorCode;
1059       										outcome3 = &errorCode;
1060       										nathQ3Row = &errorCode || &errorCode || &errorCode || &errorCode ||
1060     ! &errorCode || &errorCode || &errorCode ;
1061       										logLQ3 = &errorCode;
1062       									end; /*end quadrant 3 is empty*/
1063       
1064       									else do;
1065       										empty3 = 0;
1066       										obsCasesQuadrant3 = matrix[ loc( indicateObsCasesQuadrant3 )`, ];
1067       
1068       										/*find mean, std, corr*/
1069       										meanT1ObsCasesQuadrant3 = mean( obsCasesQuadrant3[ , 4 ] );
1070       										meanT2ObsCasesQuadrant3 = mean( obsCasesQuadrant3[ , 5 ] );
1071       										covMatrixObsCasesQuadrant3 = cov( obsCasesQuadrant3[ , 4 ] ||
1071     ! obsCasesQuadrant3[ , 5 ] );
1072       
1073       										stdT1ObsCasesQuadrant3 = sqrt( covMatrixObsCasesQuadrant3[ 1, 1 ] );
1074       										stdT2ObsCasesQuadrant3 = sqrt( covMatrixObsCasesQuadrant3[ 2, 2 ] );
1075       
1076       										/*use only element 12 of the 2 x 2 covariance matrix*/
1077       										corrObsCasesQuadrant3 = covMatrixObsCasesQuadrant3[ 1, 2 ] /
24                                        The SAS System           13:43 Wednesday, April 24, 2013

1077     ! stdT1ObsCasesQuadrant3 / stdT2ObsCasesQuadrant3;
1078       
1079       										/*run nath algorithm*/
1080       										nathQ3Row = nathAlgorithm( errcode, cumErrors, &tolerance, &maxIterations,
1080     ! &errorCode, 3, cutoffs[ , 1 ], cutoffs[ , 2 ],
1081       							                                       meanT1ObsCasesQuadrant3,
1081     ! meanT2ObsCasesQuadrant3,
1082       							                                       stdT1ObsCasesQuadrant3,
1082     ! stdT2ObsCasesQuadrant3,
1083       							                                       corrObsCasesQuadrant3 );
1084       
1085       										/*outcome of nath algorithm*/
1086       										outcome3 = nathQ3Row[ , 2 ];
1087       
1088       										/*maximize the log likelihood if the algorithm converged*/
1089       										if outcome3 = 0 then logLQ3 = maximizeLogLikelihood( errcode, cumErrors,
1089     ! numberObsCases, nathQ3Row[ , 3 ], nathQ3Row[ , 4 ],
1090       							                                           		                 nathQ3Row[ , 5 ],
1090     ! nathQ3Row[ , 6 ], nathQ3Row[ , 7 ],
1091       							                                            	                 meanT1ObsCases,
1091     ! meanT2ObsCases,
1092       							                                            	                 stdT1ObsCases,
1092     ! stdT2ObsCases,
1093       							                                            	                 corrObsCases );
1094       
1095       										else logLQ3 = &errorCode;
1096       
1097       									end; /*end quadrant 3 is not empty*/
1098       
1099       									/*if there are < 2 observed cases in quadrant 4*/
1100       									/*then return an error and do not calculate summary statistics for quadrant
1100     ! 4*/
1101       									/*otherwise calculate summary statistics*/
1102       									if numberObsCasesQuadrant4 < 2 then do;
1103       										
1104       										empty4 = 1;
1105       										meanT1ObsCasesQuadrant4 = &errorCode;
1106       										meanT2ObsCasesQuadrant4 = &errorCode;
1107       										stdT1ObsCasesQuadrant4 = &errorCode;
1108       										stdT2ObsCasesQuadrant4 = &errorCode;
1109       										corrObsCasesQuadrant4 = &errorCode;
1110       										outcome4 = &errorCode;
1111       										nathQ4Row = &errorCode || &errorCode || &errorCode || &errorCode ||
1111     ! &errorCode || &errorCode || &errorCode ;
1112       										logLQ4 = &errorCode;
1113       										meanT1ObsCasesQ123 = &errorCode;
1114       										meanT2ObsCasesQ123 = &errorCode;
1115       										stdT1ObsCasesQ123 = &errorCode;
1116       										stdT2ObsCasesQ123 = &errorCode;
1117       										corrObsCasesQ123 = &errorCode;	
1118       									end; /*end quadrant 4 is empty*/
1119       
1120       									else do;
25                                        The SAS System           13:43 Wednesday, April 24, 2013

1121       										empty4 = 0;
1122       
1123       										obsCasesQuadrant4 = matrix[ loc( indicateObsCasesQuadrant4 )`, ];
1124       
1125       										/*find mean, std, corr*/
1126       										meanT1ObsCasesQuadrant4 = mean( obsCasesQuadrant4[ , 4 ] );
1127       										meanT2ObsCasesQuadrant4 = mean( obsCasesQuadrant4[ , 5 ] );
1128       										covMatrixObsCasesQuadrant4 = cov( obsCasesQuadrant4[ , 4 ] ||
1128     ! obsCasesQuadrant4[ , 5 ] );
1129       
1130       										stdT1ObsCasesQuadrant4 = sqrt( covMatrixObsCasesQuadrant4[ 1, 1 ] );
1131       										stdT2ObsCasesQuadrant4 = sqrt( covMatrixObsCasesQuadrant4[ 2, 2 ] );
1132       
1133       										/*use only element 12 of the 2 x 2 covariance matrix*/
1134       										corrObsCasesQuadrant4 = covMatrixObsCasesQuadrant4[ 1, 2 ] /
1134     ! stdT1ObsCasesQuadrant4 / stdT2ObsCasesQuadrant4;
1135       
1136       										/*run nath algorithm*/
1137       										nathQ4Row = nathAlgorithm( errcode, cumErrors,
1138       															       &tolerance, &maxIterations, &errorCode, 4, cutoffs[ , 1 ],
1138     ! cutoffs[ , 2 ],
1139       							                                       meanT1ObsCasesQuadrant4,
1139     ! meanT2ObsCasesQuadrant4,
1140       							                                       stdT1ObsCasesQuadrant4,
1140     ! stdT2ObsCasesQuadrant4,
1141       							                                       corrObsCasesQuadrant4 );
1142       
1143       										/*outcome of nath algorithm*/
1144       										outcome4 = nathQ4Row[ , 2 ];
1145       
1146       										/*maximize the log likelihood if the algorithm converged*/
1147       										if outcome4 = 0 then logLQ4 = maximizeLogLikelihood( errcode, cumErrors,
1147     ! numberObsCases, nathQ4Row[ , 3 ], nathQ4Row[ , 4 ],
1148       							                                           		                 nathQ4Row[ , 5 ],
1148     ! nathQ4Row[ , 6 ], nathQ4Row[ , 7 ],
1149       							                                            	                 meanT1ObsCases,
1149     ! meanT2ObsCases,
1150       							                                            	                 stdT1ObsCases,
1150     ! stdT2ObsCases,
1151       							                                            	                 corrObsCases );
1152       
1153       										else logLQ4 = &errorCode;	
1154       
1155       									end; /*end quadrant 4 is not empty*/
1156       
1157       								end; /*end q123 is not empty*/
1158       
1159       								/*if the Nath estimates are missing for all 4 quadrants then set remaining
1159     ! values to missing*/
1160       								if ( outcome1 ^= 0 &
1161       				                     outcome2 ^= 0 &
1162       				                     outcome3 ^= 0 &
1163       				                     outcome4 ^= 0 ) then do;
26                                        The SAS System           13:43 Wednesday, April 24, 2013

1164       									
1165       									nathError = 1;
1166       									weighted = &errorCode;
1167       									correctedNumberCasesError = &errorCode;
1168       									nathEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode ||
1168     ! &errorCode || &errorCode || &errorCode || &errorCode|| &errorCode ;
1169       									bivariateNormalProbabilitiesNath = &errorCode || &errorCode ;
1170       									bivNormProbsWeighted = &errorCode || &errorCode ;
1171       									correctedNumberCasesNonCases = &errorCode || &errorCode ;
1172       									weightedEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode ||
1172     !  &errorCode ;
1173       									correctedEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode
1173     ! || &errorCode ;
1174       									correctedAUCT1 = &errorCode || &errorCode || &errorCode ;
1175       									correctedAUCT2 = &errorCode || &errorCode || &errorCode ;
1176       									correctedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
1176     ! &errorCode ;
1177       									hypErrorCorrected = &errorCode ;
1178       									directionCorrectedHypTest = &errorCode ;
1179       									uncorrectedBias = &errorCode ;
1180       								end; /*end nath algorithm did not converge in any quadrants*/
1181       
1182       								else do;
1183       
1184       									nathError = 0;
1185       									/*combine logL with estimates*/
1186       									nathAndLogLQ1Row = 1 || logLQ1 || nathQ1Row;
1187       									nathAndLogLQ2Row = 2 || logLQ2 || nathQ2Row;
1188       									nathAndLogLQ3Row = 3 || logLQ3 || nathQ3Row;
1189       									nathAndLogLQ4Row = 4 || logLQ4 || nathQ4Row;
1190       
1191       									/*stack quadrant nath estimates*/
1192       									nathCandidates = nathAndLogLQ1Row // nathAndLogLQ2Row // nathAndLogLQ3Row //
1192     ! nathAndLogLQ4Row;
1193       
1194       									/*pick off nath rows that have outcome = 0*/
1195       									nathCandidatesConverged = nathCandidates[ loc( nathCandidates[ , 4 ] = 0 )`, ]
1195     ! ;
1196       							
1197       									/*choose the row with the maximum log likelihood as the nath estimates*/
1198       									nathEstimatesRow = nathCandidatesConverged[ nathCandidatesConverged[ <:>, 2 ],
1198     !  ];
1199       
1200       									/*calculate bivariate probabilities based on nath estimates*/
1201       								    bivariateNormalProbabilitiesNath = estimateBivNormProbabilities( errcode,
1201     ! cumErrors, cutoffs[ , 1 ], cutoffs[ , 2 ],
1202       							
1202     ! nathEstimatesRow[ , 5  ], nathEstimatesRow[ , 6 ],
1203       							
1203     ! nathEstimatesRow[ , 7 ], nathEstimatesRow[ , 8 ],
1204       							
1204     ! nathEstimatesRow[ , 9 ], &errorCode );
1205       
27                                        The SAS System           13:43 Wednesday, April 24, 2013

1206       									/*if q123 or q4 are empty then we cannot calculate the weighted estimates*/
1207       									/*instead, we use the nath estimates as the corrected estimates*/
1208       									if empty123 = 1 | empty4 = 1 then do;
1209       										weighted = 0;
1210       										weightedEstimatesRow = &errorCode || &errorCode || &errorCode || &errorCode
1210     ! || &errorCode ;
1211       										bivNormProbsWeighted = &errorCode || &errorCode ;
1212       
1213       										/*calculate corrected number of cases/non-cases based on bivariate
1213     ! probabilities*/
1214       										correctedEstimatesRow = nathEstimatesRow[ , { 5, 6, 7, 8, 9 } ];
1215       										correctedNumberCasesNonCases = calcCorrectedNumCasesNonCases( errcode,
1215     ! cumErrors, bivariateNormalProbabilitiesNath[ , 1 ],
1216       								            													      &sampSize, numberObsCasesQ123 );
1217       									end; /*end use corrected estimates*/
1218       
1219       									/*if there are at least 2 observations in q123 AND q4 then we can calculate
1219     ! the weighted estimates*/
1220       									/*we will use these estimates as the corrected estimates*/
1221       									else do;
1222       										weighted = 1;
1223       
1224       										weightedEstimatesRow = calculateWeightedEstimates(
1224     ! bivariateNormalProbabilitiesNath[ , 1 ],
1225       																						   bivariateNormalProbabilitiesNath[ , 2 ],
1226       																						   meanT1ObsCasesQ123, meanT2ObsCasesQ123,
1227       																						   stdT1ObsCasesQ123, stdT2ObsCasesQ123,
1228       																						   corrObsCasesQ123,
1229       																						   meanT1ObsCasesQuadrant4, meanT2ObsCasesQuadrant4,
1230                   																		       stdT1ObsCasesQuadrant4, stdT2ObsCasesQuadrant4,
1231        																				           corrObsCasesQuadrant4 );
1232       
1233       										correctedEstimatesRow = weightedEstimatesRow;
1234       										
1235       										/*recalculate bivariate normal probabilities using weighted estimates*/
1236       								 		bivNormProbsWeighted = estimateBivNormProbabilities( errcode, cumErrors,
1236     ! cutoffs[ , 1 ], cutoffs[ , 2 ],
1237       							
1237     ! weightedEstimatesRow[ , 1 ], weightedEstimatesRow[ , 2 ],
1238       							
1238     ! weightedEstimatesRow[ , 3 ], weightedEstimatesRow[ , 4 ],
1239       							
1239     ! weightedEstimatesRow[ , 5 ], &errorCode );
1240       
1241       										/*use the bivariate normal probabilities calculated from the weighted
1241     ! estimates to correct the number of cases*/
1242       										correctedNumberCasesNonCases = calcCorrectedNumCasesNonCases( errcode,
1242     ! cumErrors, bivNormProbsWeighted[ , 1 ],
1243       								            													      &sampSize, numberObsCasesQ123 );
1244       
1245       									end; /*end use weighted estimates*/
1246       
1247       									/*sometimes the corrected number of cases will be greater than the sample
28                                        The SAS System           13:43 Wednesday, April 24, 2013

1247     ! size*/
1248       									/*this happens because the bivariate probabilties (f1, f2) are estimated with
1248     ! error*/
1249       									/*if the corrected number of cases is greater than the sample size, then do
1249     ! not bias correct*/
1250       									/*also, the corrected number of cases could be 0, which would blow up R in the
1250     !  hypothesis test*/
1251       									/*this is bad, so return an error if this happens and do not do bias
1251     ! correction*/
1252       									/*essentially, you cannot do bias correction if you have an extreme number of
1252     ! observed cases or non-cases*/
1253       									if ( correctedNumberCasesNonCases[ , 1 ] > &sampSize |
1254       		                                 correctedNumberCasesNonCases[ , 1 ] = 0 ) then do;
1255       									
1256       									   correctedNumberCasesError = 1;
1257       									   correctedAUCT1 = &errorCode || &errorCode || &errorCode ;
1258       									   correctedAUCT2 = &errorCode || &errorCode || &errorCode ;
1259       									   correctedHypTest = &errorCode || &errorCode || &errorCode || &errorCode ||
1259     ! &errorCode ;
1260       									   hypErrorCorrected = &errorCode;
1261       									   directionCorrectedHypTest = &errorCode;
1262       									   uncorrectedBias = &errorCode;
1263       									end; /*end corrected number of cases is greater than sample size*/
1264       
1265       									else do;
1266       										correctedNumberCasesError = 0;	
1267       
1268       										/*calculate corrected AUC*/
1269       										correctedAUCT1 = calculateAUC( errcode, cumErrors, correctedEstimatesRow[ , 1
1269     !  ], meanT1ObsNonCases,
1270       						                                               correctedEstimatesRow[ , 3 ],
1270     ! stdT1ObsNonCases );
1271       										correctedAUCT2 = calculateAUC( errcode, cumErrors, correctedEstimatesRow[ , 2
1271     !  ], meanT2ObsNonCases,
1272       						                                               correctedEstimatesRow[ , 4 ],
1272     ! stdT2ObsNonCases );
1273       
1274       										correctedHypTest = differenceInAUCHypothesisTest( errcode, cumErrors,
1274     ! correctedAUCT1[ , 1 ],
1275       						 																  correctedAUCT1[ , 2 ],
1276       						 																  correctedAUCT1[ , 3 ],
1277       																						  correctedAUCT2[ , 1 ],
1278       																						  correctedAUCT2[ , 2 ],
1279       						 																  correctedAUCT2[ , 3 ],
1280       																						  correctedEstimatesRow[ , 5 ],
1281       																						  corrObsNonCases,
1282       						
1282     ! correctedNumberCasesNonCases[ , 1 ],
1283       																						  correctedNumberCasesNonCases[ , 2 ] );
1284       
1285       										/*calculate uncorrected bias in the difference in AUCs*/;
1286       										if correctedHypTest[ , 1 ] ^= &errorCode then uncorrectedBias =
1286     ! correctedHypTest[ , 1 ] - completeHypTest[ , 1 ];
29                                        The SAS System           13:43 Wednesday, April 24, 2013

1287       											else uncorrectedBias = &errorCode;
1288       
1289       										/*check direction of rejection against population difference in AUC*/	
1290       										if correctedHypTest[ , 5 ] = 1 then do;
1291       
1292       											/*if the population difference is 0 but the comp/obs/corr rejects then mark
1292     ! the direction of rejection as a 1*/
1293       											/*also return an error so this kind of rejection can be separated from other
1293     !  kinds*/
1294       											if populationDeltaAUC = 0 then do;
1295       												hypErrorCorrected = 1;
1296       												directionCorrectedHypTest = 1;
1297       											end;
1298       
1299       											/*if the population difference has the same sign as the comp/obs/corr
1299     ! difference then the tests are in the same order*/
1300       											/*this is a rejection in the correct direction*/
1301       											else if ( populationDeltaAUC < 0 & correctedHypTest[ , 1 ] < 0 ) |
1302       							                        ( populationDeltaAUC > 0 & correctedHypTest[ , 1 ] > 0 )
1302     !  then do;
1303       												hypErrorCorrected = 0;
1304       												directionCorrectedHypTest = 1;
1305       											end;
1306       
1307       											/*if the population difference has the opposite sign as the comp/obs/corr
1307     ! difference then the tests are in the wrong order*/
1308       											/*this is a rejection in the wrong or reverse direction*/
1309       											else if ( populationDeltaAUC < 0 & correctedHypTest[ , 1 ] > 0 ) |
1310       										            ( populationDeltaAUC > 0 & correctedHypTest[ , 1 ] < 0 ) then do;
1311       												hypErrorCorrected = 0;
1312       												directionCorrectedHypTest = -1;
1313       											end;
1314       
1315       										end; /*end corrected hypothesis test rejected*/
1316       
1317       										/*if the comp/obs/corr hyp test did not reject then set the direction of
1317     ! rejection to 0*/
1318       										else do;
1319       											hypErrorCorrected = 0;
1320       											directionCorrectedHypTest = 0;
1321       										end; /*end corrected hypothesis test failed to reject*/
1322       
1323       									end; /*end corrected number of cases is less than sample size*/
1324       							
1325       								end; /*end nath algorithm converged in at least one quadrant*/
1326       
1327       							end; /*end enough observed cases/non-cases*/
1328       
1329       						end; /*end enough true cases/non-cases*/
1330       
1331       						output =    rep || obsError || nathError || weighted || correctedNumberCasesError
1331     !  ||
1332       									
30                                        The SAS System           13:43 Wednesday, April 24, 2013

1333       								    empty123 || empty1 || empty2 || empty3 || empty4 ||
1334       
1335       									cutoffs ||
1336       
1337       									maxIterations || tolerance || sampSize ||
1338       
1339       							        numberObsCases ||
1340       					                meanT1ObsCases || meanT2ObsCases ||
1341       							        stdT1ObsCases || stdT2ObsCases ||
1342       								    corrObsCases ||
1343       
1344       							        numberObsNonCases ||
1345       					                meanT1ObsNonCases || meanT2ObsNonCases ||
1346       					                stdT1ObsNonCases || stdT2ObsNonCases ||
1347       								    corrObsNonCases ||
1348       
1349       							        numberObsCasesQuadrant1 ||
1350       					                meanT1ObsCasesQuadrant1 || meanT2ObsCasesQuadrant1 ||
1351       							        stdT1ObsCasesQuadrant1 || stdT2ObsCasesQuadrant1 ||
1352       							        corrObsCasesQuadrant1 ||
1353       
1354       							        numberObsCasesQuadrant2 ||
1355       					                meanT1ObsCasesQuadrant2 || meanT2ObsCasesQuadrant2 ||
1356       							        stdT1ObsCasesQuadrant2 || stdT2ObsCasesQuadrant2 ||
1357       							        corrObsCasesQuadrant2 ||
1358       
1359       							        numberObsCasesQuadrant3 ||
1360       					                meanT1ObsCasesQuadrant3 || meanT2ObsCasesQuadrant3 ||
1361       							        stdT1ObsCasesQuadrant3 || stdT2ObsCasesQuadrant3 ||
1362       							        corrObsCasesQuadrant3 ||
1363       
1364       							        numberObsCasesQuadrant4 ||
1365       					                meanT1ObsCasesQuadrant4 || meanT2ObsCasesQuadrant4 ||
1366       							        stdT1ObsCasesQuadrant4 || stdT2ObsCasesQuadrant4 ||
1367       							        corrObsCasesQuadrant4 ||
1368       
1369       							        numberObsCasesQ123 ||
1370       					                meanT1ObsCasesQ123 || meanT2ObsCasesQ123 ||
1371       							        stdT1ObsCasesQ123 || stdT2ObsCasesQ123 ||
1372       							        corrObsCasesQ123 ||
1373       
1374       									outcome1 || outcome2 || outcome3 || outcome4 ||
1375       
1376       									nathEstimatesRow ||
1377       
1378       									bivariateNormalProbabilitiesNath || bivNormProbsWeighted ||
1379       
1380       								    correctedNumberCasesNonCases ||
1381       
1382       								    weightedEstimatesRow ||
1383       
1384       								    correctedEstimatesRow ||
1385       
31                                        The SAS System           13:43 Wednesday, April 24, 2013

1386       				                    observedAUCT1 || observedAUCT2 || observedHypTest ||
1387       				                    correctedAUCT1 || correctedAUCT2 || correctedHypTest;
1388       
1389       						errorsThisRep = cumErrors - pastErrors;
1390       
1391       						if errorsThisRep >= 1 then resumeError = 1;
1392       							else resumeError = 0;
1393       
1394       						pastErrors = cumErrors;
1395       
1396       						/*there should 163 columns in the output matrix (one row per rep)*/
1397       						/*if there are not 163 columns then add enough columns to make it that many*/
1398       						/*we do this so the output row can be appended to the previous output row, even
1398     ! if there was an error during the current iteration*/
1399       						if ( ncol( output ) ^= 108 ) then do;
1400       							columnError = 1;
1401       							additionalColumnsNeeded = 108 - ncol( output );
1402       							addColumns = j( 1, additionalColumnsNeeded, &errorCode );
1403       							results = output || addColumns || columnError || additionalColumnsNeeded ||
1404                                             resumeError || errorsThisRep || cumErrors;
1405       						end;
1406       
1407       						else do;
1408       							results = output || 0 || 0 || resumeError || errorsThisRep || cumErrors;
1409       
1410       						end;
1411       
1412       						append from results;
1413       
1414       					end; /*end repetition loop*/
1415       
1416       				end; /*end psi loop*/
1417       
1418       				cumErrors = -1;
1419       
1420       			finish; /* finish biasCorrection */
1421       
1422       			run biasCorrection;
1423       
1424       			
1425       
1426       		finish main; /* finish main */
1427       	
1428       
1429       		run; /* run main */
1430       			
1431       		close out01.results;
1432       
1433       	quit;
1434       
1435       %mend;
1436       

32                                        The SAS System           13:43 Wednesday, April 24, 2013

ERROR: Errors printed on page 2.

NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           0.37 seconds
      user cpu time       0.10 seconds
      system cpu time     0.06 seconds
      memory              3237.40k
      OS Memory           4132.00k
      Timestamp           04/24/2013 01:43:09 PM
      
